// Generated by Haxe 4.1.1
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
var Direction = $hxEnums["Direction"] = { __ename__ : true, __constructs__ : ["UP","LEFT","DOWN","RIGHT"]
	,UP: {_hx_index:0,__enum__:"Direction",toString:$estr}
	,LEFT: {_hx_index:1,__enum__:"Direction",toString:$estr}
	,DOWN: {_hx_index:2,__enum__:"Direction",toString:$estr}
	,RIGHT: {_hx_index:3,__enum__:"Direction",toString:$estr}
};
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
}
EReg.__name__ = true;
Object.assign(EReg.prototype, {
	__class__: EReg
});
class dm_Dimension {
	constructor(width,height) {
		if(width < 0) {
			throw new haxe_Exception("width < 0");
		}
		if(height < 0) {
			throw new haxe_Exception("height < 0");
		}
		this.w = width;
		this.h = height;
	}
	eq(other,delta) {
		if(delta == null) {
			delta = 0;
		}
		if(this.w == other.w) {
			return this.h == other.h;
		} else {
			return false;
		}
	}
}
dm_Dimension.__name__ = true;
Object.assign(dm_Dimension.prototype, {
	__class__: dm_Dimension
});
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	get_message() {
		return this.message;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
});
class dm_Device {
	static isMobilf() {
		return new EReg("Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini","i").match($global.navigator.userAgent);
	}
	static isMobilHf() {
		if(dm_Device.isMobilf() && window.screen.orientation != null) {
			if(window.screen.orientation.type != "landscape-primary") {
				return window.screen.orientation.type == "landscape-secondary";
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	static screenf() {
		let ratio = window.devicePixelRatio;
		if(ratio == null) {
			return new dm_Dimension(window.screen.width,window.screen.height);
		}
		return new dm_Dimension(window.screen.width * ratio | 0,window.screen.height * ratio | 0);
	}
}
dm_Device.__name__ = true;
class dm_Board {
	constructor(width,height) {
		this.canvas = js_Boot.__cast(window.document.createElement("canvas") , HTMLCanvasElement);
		this.wg = window.document.createElement("div");
		this.canvas.width = width;
		this.canvas.height = height;
		this.wg.style.overflow = "hidden";
		this.wg.style.position = "relative";
		this.wg.style.width = width + "px";
		this.wg.style.height = height + "px";
		this.wg.appendChild(this.canvas);
	}
	get_width() {
		return this.canvas.width;
	}
	get_height() {
		return this.canvas.height;
	}
	setBackground(value) {
		this.wg.style.background = value;
		return this;
	}
	drawImage(img,ix,iy,iw,ih,bx,by,bw,bh) {
		this.canvas.getContext("2d",null).drawImage(img,ix,iy,iw,ih,bx,by,bw,bh);
		return this;
	}
	coverImage(img) {
		return this.drawImage(img,0,0,img.width,img.height,0,0,this.get_width(),this.get_height());
	}
	drawCanvas(cvs,cx,cy,cw,ch,bx,by,bw,bh) {
		this.canvas.getContext("2d",null).drawImage(cvs,cx,cy,cw,ch,bx,by,bw,bh);
		return this;
	}
	copyCanvas(cvs,x,y) {
		return this.drawCanvas(cvs,0,0,cvs.width,cvs.height,x,y,cvs.width,cvs.height);
	}
	coverCanvas(cvs) {
		return this.drawCanvas(cvs,0,0,cvs.width,cvs.height,0,0,this.get_width(),this.get_height());
	}
	copyFrom(other,x,y) {
		return this.copyCanvas(other.canvas,x,y);
	}
	coverFrom(other) {
		return this.coverCanvas(other.canvas);
	}
	clear() {
		this.canvas.getContext("2d",null).clearRect(0,0,this.get_width(),this.get_height());
		return this;
	}
	cut(x,y,width,height) {
		return new dm_Board(width,height).copyCanvas(this.canvas,-x,-y);
	}
	addCanvas(cv) {
		this.wg.appendChild(cv);
		return this;
	}
	removeCanvas(cv) {
		this.wg.removeChild(cv);
		return this;
	}
}
dm_Board.__name__ = true;
Object.assign(dm_Board.prototype, {
	__class__: dm_Board
});
class dm_Ui {
	static Q(str,el) {
		if(str == null) {
			return new dm_Domo(el);
		}
		switch(str.charAt(0)) {
		case "#":
			return new dm_Domo(window.document.getElementById(str.substring(1)));
		case "@":
			return new dm_Domo(window.document.querySelector(str.substring(1)));
		default:
			return new dm_Domo(window.document.createElement(str));
		}
	}
	static alert(msg) {
		alert(Std.string(msg));
	}
	static confirm(msg) {
		return confirm(Std.string(msg));
	}
	static upload(path,action) {
		let url = path.charAt(0) == "/" ? "http://" + $global.location.host + path : path;
		let request = new XMLHttpRequest();
		request.onreadystatechange = function() {
			if(request.readyState == 4) {
				action(request.responseText);
			}
		};
		request.open("GET",url,true);
		request.send();
	}
	static img(name) {
		if(name.indexOf(".") == -1) {
			name += ".png";
		}
		return dm_Ui.Q("img").att("src","img/" + name);
	}
	static lightImg(name) {
		return dm_Ui.img(name).att("style","opacity:0.4");
	}
	static link(f) {
		return dm_Ui.Q("span").att("style","cursor:pointer").on(dm_ActionType.CLICK,f);
	}
	static led(color,side) {
		if(side == null) {
			side = 6;
		}
		return dm_Ui.Q("div").style("padding:" + side + "px;" + "border: 1px solid #002040;border-radius: " + side + "px;" + "background: " + color + ";");
	}
}
dm_Ui.__name__ = true;
class dm_Domo {
	constructor(e) {
		this.e = e;
	}
	html(tx) {
		this.e.innerHTML = tx;
		return this;
	}
	text(tx) {
		this.e.textContent = tx;
		return this;
	}
	klass(tx) {
		this.e.className = tx;
		return this;
	}
	style(tx) {
		this.e.setAttribute("style",tx);
		return this;
	}
	setStyle(key,tx) {
		this.e.style.setProperty(key,tx);
		return this;
	}
	att(key,value) {
		this.e.setAttribute(key,value);
		return this;
	}
	add(o) {
		this.e.appendChild(o.e);
		return this;
	}
	adds(obs) {
		let ob = $getIterator(obs);
		while(ob.hasNext()) {
			let ob1 = ob.next();
			this.e.appendChild(ob1.e);
		}
		return this;
	}
	removeAll() {
		this.e.innerHTML = "";
		return this;
	}
	on(type,action) {
		let act;
		switch(type._hx_index) {
		case 0:
			act = "blur";
			break;
		case 1:
			act = "change";
			break;
		case 2:
			act = "click";
			break;
		case 3:
			act = "dblclick";
			break;
		case 4:
			act = "focus";
			break;
		case 5:
			act = "input";
			break;
		case 6:
			act = "keydown";
			break;
		case 7:
			act = "keypress";
			break;
		case 8:
			act = "keyup";
			break;
		case 9:
			act = "load";
			break;
		case 10:
			act = "mousedown";
			break;
		case 11:
			act = "mousemove";
			break;
		case 12:
			act = "mouseout";
			break;
		case 13:
			act = "mouseover";
			break;
		case 14:
			act = "mouseup";
			break;
		case 15:
			act = "wheel";
			break;
		case 16:
			act = "select";
			break;
		case 17:
			act = "selectstart";
			break;
		case 18:
			act = "submit";
			break;
		}
		this.e.addEventListener(act,action,false);
		return this;
	}
}
dm_Domo.__name__ = true;
Object.assign(dm_Domo.prototype, {
	__class__: dm_Domo
});
var dm_ActionType = $hxEnums["dm.ActionType"] = { __ename__ : true, __constructs__ : ["BLUR","CHANGE","CLICK","DBLCLICK","FOCUS","INPUT","KEYDOWN","KEYPRESS","KEYUP","LOAD","MOUSEDOWN","MOUSEMOVE","MOUSEOUT","MOUSEOVER","MOUSEUP","WHEEL","SELECT","SELECTSTART","SUBMIT"]
	,BLUR: {_hx_index:0,__enum__:"dm.ActionType",toString:$estr}
	,CHANGE: {_hx_index:1,__enum__:"dm.ActionType",toString:$estr}
	,CLICK: {_hx_index:2,__enum__:"dm.ActionType",toString:$estr}
	,DBLCLICK: {_hx_index:3,__enum__:"dm.ActionType",toString:$estr}
	,FOCUS: {_hx_index:4,__enum__:"dm.ActionType",toString:$estr}
	,INPUT: {_hx_index:5,__enum__:"dm.ActionType",toString:$estr}
	,KEYDOWN: {_hx_index:6,__enum__:"dm.ActionType",toString:$estr}
	,KEYPRESS: {_hx_index:7,__enum__:"dm.ActionType",toString:$estr}
	,KEYUP: {_hx_index:8,__enum__:"dm.ActionType",toString:$estr}
	,LOAD: {_hx_index:9,__enum__:"dm.ActionType",toString:$estr}
	,MOUSEDOWN: {_hx_index:10,__enum__:"dm.ActionType",toString:$estr}
	,MOUSEMOVE: {_hx_index:11,__enum__:"dm.ActionType",toString:$estr}
	,MOUSEOUT: {_hx_index:12,__enum__:"dm.ActionType",toString:$estr}
	,MOUSEOVER: {_hx_index:13,__enum__:"dm.ActionType",toString:$estr}
	,MOUSEUP: {_hx_index:14,__enum__:"dm.ActionType",toString:$estr}
	,WHEEL: {_hx_index:15,__enum__:"dm.ActionType",toString:$estr}
	,SELECT: {_hx_index:16,__enum__:"dm.ActionType",toString:$estr}
	,SELECTSTART: {_hx_index:17,__enum__:"dm.ActionType",toString:$estr}
	,SUBMIT: {_hx_index:18,__enum__:"dm.ActionType",toString:$estr}
};
class Cts {
	static get_levels() {
		return [I18n._("Easy"),I18n._("Medium"),I18n._("Expert")];
	}
	static mkDefaultPicture() {
		let board = new dm_Board(800,600);
		let ctx = board.canvas.getContext("2d",null);
		ctx.fillStyle = "#ffffff";
		ctx.fillRect(0,0,board.get_width(),board.get_height());
		let i = dm_Ui.img("logo");
		i.on(dm_ActionType.LOAD,function(e) {
			let pattern = ctx.createPattern(js_Boot.__cast(i.e , HTMLImageElement),"repeat");
			ctx.fillStyle = pattern;
			ctx.fillRect(0,0,800,600);
		});
		return board;
	}
	static mkLed(selected) {
		if(selected == null) {
			selected = false;
		}
		let ratio = window.devicePixelRatio;
		if(ratio == null) {
			ratio = 1;
		}
		if(selected) {
			return dm_Ui.led("#e9d9b9",6 * ratio | 0);
		} else {
			return dm_Ui.led("#b9d9e9",6 * ratio | 0);
		}
	}
}
Cts.__name__ = true;
class DateTools {
	static __format_get(d,e) {
		switch(e) {
		case "%":
			return "%";
		case "A":
			return DateTools.DAY_NAMES[d.getDay()];
		case "B":
			return DateTools.MONTH_NAMES[d.getMonth()];
		case "C":
			return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
		case "D":
			return DateTools.__format(d,"%m/%d/%y");
		case "F":
			return DateTools.__format(d,"%Y-%m-%d");
		case "I":case "l":
			let hour = d.getHours() % 12;
			return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
		case "M":
			return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
		case "R":
			return DateTools.__format(d,"%H:%M");
		case "S":
			return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
		case "T":
			return DateTools.__format(d,"%H:%M:%S");
		case "Y":
			return Std.string(d.getFullYear());
		case "a":
			return DateTools.DAY_SHORT_NAMES[d.getDay()];
		case "b":case "h":
			return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
		case "d":
			return StringTools.lpad(Std.string(d.getDate()),"0",2);
		case "e":
			return Std.string(d.getDate());
		case "H":case "k":
			return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
		case "m":
			return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
		case "n":
			return "\n";
		case "p":
			if(d.getHours() > 11) {
				return "PM";
			} else {
				return "AM";
			}
			break;
		case "r":
			return DateTools.__format(d,"%I:%M:%S %p");
		case "s":
			return Std.string(d.getTime() / 1000 | 0);
		case "t":
			return "\t";
		case "u":
			let t = d.getDay();
			if(t == 0) {
				return "7";
			} else if(t == null) {
				return "null";
			} else {
				return "" + t;
			}
			break;
		case "w":
			return Std.string(d.getDay());
		case "y":
			return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
		default:
			throw haxe_Exception.thrown("Date.format %" + e + "- not implemented yet.");
		}
	}
	static __format(d,f) {
		let r_b = "";
		let p = 0;
		while(true) {
			let np = f.indexOf("%",p);
			if(np < 0) {
				break;
			}
			let len = np - p;
			r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
			r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
			p = np + 2;
		}
		let len = f.length - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		return r_b;
	}
	static format(d,f) {
		return DateTools.__format(d,f);
	}
}
DateTools.__name__ = true;
class HxOverrides {
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
class I18n {
	static en() {
		I18n.lang = "en";
	}
	static es() {
		I18n.lang = "es";
	}
	static _(key) {
		let dic = I18n.lang == "en" ? I18n.enDic : I18n.esDic;
		if(Object.prototype.hasOwnProperty.call(dic.h,key)) {
			return dic.h[key];
		} else {
			return key;
		}
	}
	static _args(key,args) {
		let bf = "";
		let v = I18n._(key);
		let isCode = false;
		let _g = 0;
		let _g1 = v.length;
		while(_g < _g1) {
			let i = _g++;
			let ch = v.charAt(i);
			if(isCode) {
				if(ch >= "0" && ch <= "9") {
					bf += args[Std.parseInt(ch)];
				} else {
					bf += "%" + ch;
				}
				isCode = false;
			} else if(ch == "%") {
				isCode = true;
			} else {
				bf += ch;
			}
		}
		return bf;
	}
}
I18n.__name__ = true;
var Icon = $hxEnums["Icon"] = { __ename__ : true, __constructs__ : ["AUDIO_OFF","AUDIO_ON","BLANK","DMPUZZLE","HELP","LEFT","OK","OPEN","RUN","SAVE","TRASH","WIN0","WIN1","WIN2","WIN3","WIN4","WIN5","WIN6"]
	,AUDIO_OFF: {_hx_index:0,__enum__:"Icon",toString:$estr}
	,AUDIO_ON: {_hx_index:1,__enum__:"Icon",toString:$estr}
	,BLANK: {_hx_index:2,__enum__:"Icon",toString:$estr}
	,DMPUZZLE: {_hx_index:3,__enum__:"Icon",toString:$estr}
	,HELP: {_hx_index:4,__enum__:"Icon",toString:$estr}
	,LEFT: {_hx_index:5,__enum__:"Icon",toString:$estr}
	,OK: {_hx_index:6,__enum__:"Icon",toString:$estr}
	,OPEN: {_hx_index:7,__enum__:"Icon",toString:$estr}
	,RUN: {_hx_index:8,__enum__:"Icon",toString:$estr}
	,SAVE: {_hx_index:9,__enum__:"Icon",toString:$estr}
	,TRASH: {_hx_index:10,__enum__:"Icon",toString:$estr}
	,WIN0: {_hx_index:11,__enum__:"Icon",toString:$estr}
	,WIN1: {_hx_index:12,__enum__:"Icon",toString:$estr}
	,WIN2: {_hx_index:13,__enum__:"Icon",toString:$estr}
	,WIN3: {_hx_index:14,__enum__:"Icon",toString:$estr}
	,WIN4: {_hx_index:15,__enum__:"Icon",toString:$estr}
	,WIN5: {_hx_index:16,__enum__:"Icon",toString:$estr}
	,WIN6: {_hx_index:17,__enum__:"Icon",toString:$estr}
};
class dm_Audio {
	constructor(tracks) {
		this.tracks = tracks;
		this.ix = 0;
	}
	get_channels() {
		return this.tracks.length;
	}
	play() {
		this.tracks[this.ix++].play();
		if(this.ix == this.get_channels()) {
			this.ix = 0;
		}
	}
	static mk(url,channels) {
		if(channels == null) {
			channels = 1;
		}
		let tracks = [];
		let _g = 0;
		let _g1 = channels;
		while(_g < _g1) {
			let i = _g++;
			tracks.push(new Audio(url));
		}
		return new dm_Audio(tracks);
	}
}
dm_Audio.__name__ = true;
Object.assign(dm_Audio.prototype, {
	__class__: dm_Audio
});
class data_Picture {
	constructor(name,file,author,link) {
		this.img = null;
		this.name = name;
		this.file = file;
		this.author = author;
		this.link = link;
	}
	setImg(img) {
		this.img = js_Boot.__cast(img.e , HTMLImageElement);
	}
	getBig(dim,partSide) {
		let w = dim.w * (Cts.partsN - 2) * partSide;
		let h = dim.h * (Cts.partsN - 2) * partSide;
		let bimg = this.img == null ? new dm_Board(w,h).coverFrom(Cts.defaultPicture) : new dm_Board(w,h).coverImage(this.img);
		return new dm_Board(w + partSide * 2,h + partSide * 2).copyFrom(bimg,partSide,partSide);
	}
	getMedium() {
		let div = dm_Device.isMobilV ? 2.5 : dm_Device.isMobilH ? 5 : 4;
		let w = dm_Device.screen.w / div | 0;
		let h = w * 3 / 4 | 0;
		let bimg = this.img == null ? new dm_Board(w,h).coverFrom(Cts.defaultPicture) : new dm_Board(w,h).coverImage(this.img);
		return dm_Ui.Q(null,bimg.canvas);
	}
	getSmall() {
		let w = dm_Device.screen.w / 8 | 0;
		let h = w * 6 / 8 | 0;
		if(dm_Device.isMobilV) {
			w *= 2;
			h *= 2;
		}
		let bimg = this.img == null ? new dm_Board(w,h).coverFrom(Cts.defaultPicture) : new dm_Board(w,h).coverImage(this.img);
		let ctx = bimg.canvas.getContext("2d",null);
		ctx.strokeStyle = "#000000";
		ctx.strokeRect(0,0,w,h);
		return bimg;
	}
}
data_Picture.__name__ = true;
Object.assign(data_Picture.prototype, {
	__class__: data_Picture
});
class Loader {
	static load(fn) {
		Loader.pictsGroup = model_Group.mk().value;
		let first = Loader.pictsGroup * 6;
		let ix = 0;
		ix += 1;
		Loader.back2 = dm_Ui.img("back2").on(dm_ActionType.LOAD,function(e) {
			ix -= 1;
			return ix;
		});
		let _g = first;
		let _g1 = first + 6;
		while(_g < _g1) {
			let ip = _g++;
			let p = Loader.picts[ip];
			ix += 1;
			let img = null;
			img = dm_Ui.img("pictures/" + p.file).on(dm_ActionType.LOAD,function(e) {
				p.setImg(img);
				ix -= 1;
				return ix;
			});
		}
		let tm = new haxe_Timer(50);
		let c = 0;
		tm.run = function() {
			if(ix == 0 || c > 100) {
				tm.stop();
				if(c > 100) {
					dm_Ui.alert(ix + " images can not be loaded");
				}
				fn();
			} else {
				c += 1;
			}
		};
	}
	static getPicts() {
		let r = [];
		let first = Loader.pictsGroup * 6;
		let _g = first;
		let _g1 = first + 6;
		while(_g < _g1) {
			let ip = _g++;
			r.push(Loader.picts[ip]);
		}
		return r;
	}
	static getAllPicts() {
		return Loader.picts.slice();
	}
	static mkIcon(id,light) {
		if(light == null) {
			light = false;
		}
		let path;
		switch(id._hx_index) {
		case 0:
			path = "audioOff";
			break;
		case 1:
			path = "audioOn";
			break;
		case 2:
			path = "blank";
			break;
		case 3:
			path = "DmPuzzle";
			break;
		case 4:
			path = "help";
			break;
		case 5:
			path = "goLeft";
			break;
		case 6:
			path = "ok";
			break;
		case 7:
			path = "open";
			break;
		case 8:
			path = "run";
			break;
		case 9:
			path = "save";
			break;
		case 10:
			path = "trash";
			break;
		default:
			path = "";
		}
		if(path == "") {
			let path;
			switch(id._hx_index) {
			case 11:
				path = "win0";
				break;
			case 12:
				path = "win1";
				break;
			case 13:
				path = "win2";
				break;
			case 14:
				path = "win3";
				break;
			case 15:
				path = "win4";
				break;
			case 16:
				path = "win5";
				break;
			case 17:
				path = "win6";
				break;
			default:
				path = "";
			}
			let r = light ? dm_Ui.lightImg(path) : dm_Ui.img(path);
			if(dm_Device.isBig) {
				r.style("width:240px;height:240px");
			} else {
				r.style("width:120px;height:120px");
			}
			return r;
		}
		if(dm_Device.isBig) {
			path += "M";
		}
		if(light) {
			return dm_Ui.lightImg(path);
		} else {
			return dm_Ui.img(path);
		}
	}
}
Loader.__name__ = true;
class Main {
	static main() {
		Model.init();
		View.init();
		Loader.load(function() {
			View.update();
		});
	}
}
Main.__name__ = true;
Math.__name__ = true;
class Model {
	static init() {
		Model.orientationChanged = model_OrientationChanged.mk();
		Model.page = model_Page.mk();
		Model.level = model_Level.mk();
		Model.audio = model_Audio.mk();
		Model.group = model_Group.mk();
		Model.solved = model_Solved.mk();
		if(StringTools.startsWith($global.navigator.language,"es")) {
			I18n.es();
		} else {
			I18n.en();
		}
	}
	static serialize() {
		let js = dm_Js.ws("202012");
		let js1;
		let _g = Model.page.value;
		switch(_g._hx_index) {
		case 0:
			js1 = dm_Js.wn();
			break;
		case 1:
			let j = _g.jigsaw;
			js1 = j.toJs();
			break;
		}
		let js2 = dm_Js.wa([js,js1,dm_Js.wi(Model.level.value),dm_Js.wi(Model.group.value),dm_Js.ws(dm_Device.isMobilH ? "H" : dm_Device.isMobilV ? "V" : ""),Model.solved.toJs()]);
		return dm_B64.encode(js2.to());
	}
	static restore(s,withMarks) {
		try {
			let a = dm_Js.from(s).ra();
			let pg = a[1].isNull() ? model_PageType.INDEX : model_PageType.PICTURE(data_Jigsaw.fromJs(a[1]));
			let lv = a[2].ri();
			let gr = a[3].ri();
			let mv = a[4].rs();
			let sv = new model_Solved(a[5]);
			Model.page.setValue(pg);
			Model.level.setValue(lv);
			Model.group.setValue(gr);
			if(mv == "H" && !dm_Device.isMobilH || mv == "V" && !dm_Device.isMobilV || mv == "" && dm_Device.isMobil) {
				Model.orientationChanged.setValue(true);
			}
			if(withMarks) {
				Model.solved.addFrom(sv);
			}
			return true;
		} catch( _g ) {
			return false;
		}
	}
}
Model.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
}
Std.__name__ = true;
class StringTools {
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
StringTools.__name__ = true;
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
class Type {
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			let e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			let c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
}
Type.__name__ = true;
class View {
	static init() {
		dm_Ui.Q("@head").add(dm_Ui.Q("meta").att("name","lang").att("content",$global.navigator.language)).add(dm_Ui.Q("link").att("rel","stylesheet").att("href",dm_Device.isBig ? "stylesM.css" : "styles.css").att("type","text/css"));
		dm_Ui.Q("@body").removeAll().add(dm_Ui.Q("table").klass("main").add(dm_Ui.Q("tr").add(View.bodyWg)).add(dm_Ui.Q("tr").add(dm_Ui.Q("td").add(Cts.foot)))).add(View.modalBoxDiv);
		if(window.screen.orientation != null) {
			window.screen.orientation.onchange = function(e) {
				Model.orientationChanged.setValue(true);
				$global.location.reload();
			};
		}
	}
	static update() {
		let _g = Model.page.value;
		switch(_g._hx_index) {
		case 0:
			Model.orientationChanged.setValue(false);
			View.index = new view_Index();
			View.index.show(View.bodyWg);
			break;
		case 1:
			let j = _g.jigsaw;
			let orientationChanged = Model.orientationChanged.value;
			Model.orientationChanged.setValue(false);
			if(orientationChanged) {
				let grs = j.groups.slice();
				j = data_Jigsaw.mk(j.picture,j.level);
				j.start();
				let groups = j.groups;
				groups.splice(0,groups.length);
				j.nextGroupId = 0;
				dm_Rnd.shuffle(grs);
				grs.sort(function(e1,e2) {
					return e2.dim.w * e2.dim.h - e1.dim.w * e1.dim.h;
				});
				let ix = 0;
				let y = Cts.boardDim.h - j.dim.h * j.get_pieceSide();
				let x0 = Cts.boardDim.w - j.dim.w * j.get_pieceSide();
				let _g = 0;
				let _g1 = j.dim.h;
				while(_g < _g1) {
					let r = _g++;
					let x = x0;
					let _g1 = 0;
					let _g2 = j.dim.w;
					while(_g1 < _g2) {
						let c = _g1++;
						if(ix >= grs.length) {
							break;
						}
						let gr = grs[ix++];
						let pieces = [];
						let _g = 0;
						let _g2 = gr.dim.h;
						while(_g < _g2) {
							let r = _g++;
							let a = [];
							let _g1 = 0;
							let _g2 = gr.dim.w;
							while(_g1 < _g2) {
								let c = _g1++;
								a.push(dm_Option.None);
							}
							pieces.push(a);
						}
						let newGroup = new data_Group(j.nextGroupId++,new dm_Point(x,y),500 - ix,j.get_pieceSide(),pieces);
						newGroup.setPos(new dm_Point(x,y));
						let _g3 = 0;
						let _g4 = gr.dim.h;
						while(_g3 < _g4) {
							let r = _g3++;
							let _g = 0;
							let _g1 = gr.dim.w;
							while(_g < _g1) {
								let c = _g++;
								let _g1 = gr.pieces[r][c];
								switch(_g1._hx_index) {
								case 0:
									let p = _g1.v;
									let newp = j.getPiece(p.idRow,p.idCol);
									newp.setGroup(newGroup.id);
									newGroup.add(newp,r,c);
									break;
								case 1:
									break;
								}
							}
						}
						j.groups.push(newGroup);
						j.normalizeZindex();
						x += j.get_pieceSide();
					}
					y += j.get_pieceSide();
				}
				Model.page.setValue(model_PageType.PICTURE(j));
				View.puzzle = new view_Puzzle(j);
				View.puzzle.show(View.bodyWg);
			} else {
				View.puzzle = new view_Puzzle(j);
				View.puzzle.show(View.bodyWg);
			}
			break;
		}
	}
}
View.__name__ = true;
class data_Group {
	constructor(id,pos,zindex,partSide,pieces) {
		this.id = id;
		this.pos = pos;
		this.zindex = zindex;
		this.partSide = partSide;
		this.pieces = pieces;
		this.pieceDisplacement = partSide * (Cts.partsN - 2);
		this.dim = new dm_Dimension(pieces[0].length,pieces.length);
	}
	setPos(pos) {
		this.pos = pos;
		let x = pos.x;
		let _g = 0;
		let _g1 = this.dim.h;
		while(_g < _g1) {
			let r = _g++;
			let _g1 = 0;
			let _g2 = this.dim.w;
			while(_g1 < _g2) {
				let c = _g1++;
				let _g = this.pieces[r][c];
				switch(_g._hx_index) {
				case 0:
					let p = _g.v;
					p.setPos(pos);
					break;
				case 1:
					break;
				}
				pos = new dm_Point(pos.x + this.pieceDisplacement,pos.y);
			}
			pos = new dm_Point(x,pos.y + this.pieceDisplacement);
		}
	}
	setZindex(ix) {
		this.zindex = ix;
		return this;
	}
	add(piece,row,col) {
		if(piece.group != this.id) {
			throw new haxe_Exception("Bad piece.group " + piece.group + " in group " + this.id);
		}
		piece.setPos(new dm_Point(this.pos.x + col * piece.displacement(),this.pos.y + row * piece.displacement()));
		piece.setRow(row);
		piece.setCol(col);
		if(row >= this.dim.h || col >= this.dim.w) {
			throw new haxe_Exception("(" + row + ", " + col + ") out of range (" + this.dim.h + ", " + this.dim.w);
		}
		this.pieces[row][col] = dm_Option.Some(piece);
	}
	addGroup(g,drow,dcol) {
		let _g = 0;
		let _g1 = g.dim.h;
		while(_g < _g1) {
			let r = _g++;
			let _g1 = 0;
			let _g2 = g.dim.w;
			while(_g1 < _g2) {
				let c = _g1++;
				let _g = g.pieces[r][c];
				switch(_g._hx_index) {
				case 0:
					let piece = _g.v;
					piece.setGroup(this.id);
					this.add(piece,r + drow,c + dcol);
					break;
				case 1:
					break;
				}
			}
		}
	}
	toJs() {
		let tmp = dm_Js.wi(this.id);
		let tmp1 = this.pos.toJs();
		let tmp2 = dm_Js.wi(this.zindex);
		let tmp3 = dm_Js.wi(this.partSide);
		let _this = this.pieces;
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			let row = _this[i];
			let result1 = new Array(row.length);
			let _g1 = 0;
			let _g2 = row.length;
			while(_g1 < _g2) {
				let i = _g1++;
				let op = row[i];
				let tmp;
				switch(op._hx_index) {
				case 0:
					let p = op.v;
					tmp = p.toJs();
					break;
				case 1:
					tmp = dm_Js.wn();
					break;
				}
				result1[i] = tmp;
			}
			result[i] = dm_Js.wa(result1);
		}
		return dm_Js.wa([tmp,tmp1,tmp2,tmp3,dm_Js.wa(result)]);
	}
	static fromJs(js) {
		let a = js.ra();
		let _this = a[4].ra();
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			let _this1 = _this[i].ra();
			let result1 = new Array(_this1.length);
			let _g1 = 0;
			let _g2 = _this1.length;
			while(_g1 < _g2) {
				let i = _g1++;
				let jsp = _this1[i];
				result1[i] = jsp.isNull() ? dm_Option.None : dm_Option.Some(data_Piece.fromJs(jsp));
			}
			result[i] = result1;
		}
		let pieces = result;
		return new data_Group(a[0].ri(),dm_Point.fromJs(a[1]),a[2].ri(),a[3].ri(),pieces);
	}
}
data_Group.__name__ = true;
Object.assign(data_Group.prototype, {
	__class__: data_Group
});
class data_Jigsaw {
	constructor(picture,level,started,nextGroupId,groups) {
		this.pieces = [];
		this.smallImageV = null;
		this.imageV = null;
		this.picture = picture;
		this.level = level;
		this.started = started;
		this.nextGroupId = nextGroupId;
		this.groups = groups;
		let _g = 0;
		while(_g < groups.length) {
			let g = groups[_g];
			++_g;
			let _g1 = 0;
			let _g2 = g.pieces;
			while(_g1 < _g2.length) {
				let row = _g2[_g1];
				++_g1;
				let _g = 0;
				while(_g < row.length) {
					let op = row[_g];
					++_g;
					switch(op._hx_index) {
					case 0:
						let p = op.v;
						this.pieces.push(p);
						break;
					case 1:
						break;
					}
				}
			}
		}
		this.dim = data_Jigsaw.dimFromLevel(level);
		this.partSide = Cts.jigsawVal / (this.dim.w * (Cts.partsN - 2) + 2) | 0;
	}
	get_image() {
		let _gthis = this;
		if(this.imageV == null) {
			let picts = Loader.getPicts();
			let pict = dm_Opt.oget(dm_It.from(picts).find(function(e) {
				return e.name == _gthis.picture;
			}),picts[0]);
			this.imageV = pict.getBig(data_Jigsaw.dimFromLevel(this.level),this.partSide);
		}
		return this.imageV;
	}
	get_smallImage() {
		let _gthis = this;
		if(this.smallImageV == null) {
			let picts = Loader.getPicts();
			let pict = dm_Opt.oget(dm_It.from(picts).find(function(e) {
				return e.name == _gthis.picture;
			}),picts[0]);
			this.smallImageV = pict.getSmall();
		}
		return this.smallImageV;
	}
	get_pieceSide() {
		return this.partSide * Cts.partsN;
	}
	get_pieceDisplazament() {
		return this.partSide * (Cts.partsN - 2);
	}
	getPiece(idRow,idCol) {
		let _g = dm_It.from(this.pieces).find(function(e) {
			if(e.idRow == idRow) {
				return e.idCol == idCol;
			} else {
				return false;
			}
		});
		switch(_g._hx_index) {
		case 0:
			let p = _g.v;
			return p;
		case 1:
			throw new haxe_Exception("Piece (" + idRow + ", " + idCol + ") not found");
		}
	}
	normalizeZindex() {
		let grs = this.groups.slice();
		grs.sort(function(g1,g2) {
			if(g1.zindex > g2.zindex) {
				return 1;
			} else {
				return -1;
			}
		});
		let z = 100;
		let _g = 0;
		while(_g < grs.length) {
			let g = grs[_g];
			++_g;
			g.setZindex(z++);
		}
		grs.reverse();
		return grs;
	}
	start() {
		this.started = true;
	}
	connect(g) {
		let connected = false;
		let finished = false;
		let _g = 0;
		let _g1 = g.dim.h;
		while(_g < _g1) {
			let grow = _g++;
			let _g1 = 0;
			let _g2 = g.dim.w;
			while(_g1 < _g2) {
				let gcol = _g1++;
				let _g = g.pieces[grow][gcol];
				switch(_g._hx_index) {
				case 0:
					let gpiece = _g.v;
					let _g2 = 0;
					let _g3 = this.pieces;
					while(_g2 < _g3.length) {
						let basePiece = _g3[_g2];
						++_g2;
						if(basePiece.group == g.id) {
							continue;
						}
						let _g = gpiece.overlay(basePiece);
						switch(_g._hx_index) {
						case 0:
							let dir = _g.v;
							let baseGroup = dm_Opt.eget(dm_It.from(this.groups).find(function(e) {
								return e.id == basePiece.group;
							}));
							let startR = -gpiece.row;
							let baseStartR = -basePiece.row;
							if(dir == Direction.UP) {
								--startR;
							}
							if(dir == Direction.DOWN) {
								++startR;
							}
							let dsR = startR - baseStartR;
							let baseDsR = 0;
							let pointY = baseGroup.pos.y;
							if(dsR < 0) {
								baseDsR = -dsR;
								dsR = 0;
								pointY -= baseDsR * this.get_pieceDisplazament();
							}
							let nrows = dsR + g.dim.h;
							let baseNrows = baseDsR + baseGroup.dim.h;
							let maxRows = nrows > baseNrows ? nrows : baseNrows;
							let startC = -gpiece.col;
							let baseStartC = -basePiece.col;
							if(dir == Direction.LEFT) {
								--startC;
							}
							if(dir == Direction.RIGHT) {
								++startC;
							}
							let dsC = startC - baseStartC;
							let baseDsC = 0;
							let pointX = baseGroup.pos.x;
							if(dsC < 0) {
								baseDsC = -dsC;
								dsC = 0;
								pointX -= baseDsC * this.get_pieceDisplazament();
							}
							let ncols = dsC + g.dim.w;
							let baseNcols = baseDsC + baseGroup.dim.w;
							let maxCols = ncols > baseNcols ? ncols : baseNcols;
							let newPieces = [];
							let _g1 = 0;
							let _g4 = maxRows;
							while(_g1 < _g4) {
								let r = _g1++;
								let a = [];
								let _g = 0;
								let _g2 = maxCols;
								while(_g < _g2) {
									let c = _g++;
									a.push(dm_Option.None);
								}
								newPieces.push(a);
							}
							let newGroup = new data_Group(this.nextGroupId++,new dm_Point(pointX,pointY),1000,g.partSide,newPieces);
							newGroup.addGroup(g,dsR,dsC);
							newGroup.addGroup(baseGroup,baseDsR,baseDsC);
							let _g5 = [];
							let _g6 = 0;
							let _g7 = this.groups;
							while(_g6 < _g7.length) {
								let v = _g7[_g6];
								++_g6;
								if(v.id != g.id && v.id != baseGroup.id) {
									_g5.push(v);
								}
							}
							this.groups = _g5;
							this.groups.push(newGroup);
							this.groups = this.normalizeZindex();
							connected = true;
							if(newGroup.dim.eq(this.dim)) {
								finished = true;
								let _g = 0;
								let _g1 = newGroup.pieces;
								while(_g < _g1.length) {
									let row = _g1[_g];
									++_g;
									let _g2 = 0;
									while(_g2 < row.length) {
										let op = row[_g2];
										++_g2;
										if(op == dm_Option.None) {
											finished = false;
										}
									}
								}
							}
							return { connected : connected, finished : finished};
						case 1:
							break;
						}
					}
					break;
				case 1:
					break;
				}
			}
		}
		return { connected : connected, finished : finished};
	}
	toJs() {
		let tmp = dm_Js.ws(this.picture);
		let tmp1 = dm_Js.wi(this.level);
		let tmp2 = dm_Js.wb(this.started);
		let tmp3 = dm_Js.wi(this.nextGroupId);
		let _this = this.groups;
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = _this[i].toJs();
		}
		return dm_Js.wa([tmp,tmp1,tmp2,tmp3,dm_Js.wa(result)]);
	}
	static dimFromLevel(level) {
		if(level == 0) {
			return Cts.easyDim;
		} else if(level == 1) {
			return Cts.mediumDim;
		} else {
			return Cts.expertDim;
		}
	}
	static mk(picture,level) {
		let dim = data_Jigsaw.dimFromLevel(level);
		let partSide = Cts.jigsawVal / (dim.w * (Cts.partsN - 2) + 2) | 0;
		let pieces = [];
		let groups = [];
		let dis = partSide * (Cts.partsN - 2);
		let groupId = 0;
		let _g = 0;
		let _g1 = dim.h;
		while(_g < _g1) {
			let row = _g++;
			let a = [];
			let _g1 = 0;
			let _g2 = dim.w;
			while(_g1 < _g2) {
				let col = _g1++;
				let gpos = new dm_Point(col * dis,row * dis);
				let pc = new data_Piece(groupId,row,col,0,0,partSide,gpos,row == 0 ? 0 : pieces[row - 1][col].down * -1,col == dim.w - 1 ? 0 : dm_Rnd.i(2) == 0 ? -1 : 1,row == dim.h - 1 ? 0 : dm_Rnd.i(2) == 0 ? -1 : 1,col == 0 ? 0 : a[col - 1].right * -1);
				let group = new data_Group(groupId,gpos,100 + groupId,partSide,[[dm_Option.None]]);
				group.add(pc,0,0);
				++groupId;
				groups.push(group);
				a.push(pc);
			}
			pieces.push(a);
		}
		return new data_Jigsaw(picture,level,false,groupId,groups);
	}
	static fromJs(js) {
		let a = js.ra();
		let tmp = a[0].rs();
		let tmp1 = a[1].ri();
		let tmp2 = a[2].rb();
		let tmp3 = a[3].ri();
		let _this = a[4].ra();
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = data_Group.fromJs(_this[i]);
		}
		return new data_Jigsaw(tmp,tmp1,tmp2,tmp3,result);
	}
}
data_Jigsaw.__name__ = true;
Object.assign(data_Jigsaw.prototype, {
	__class__: data_Jigsaw
});
class data_Piece {
	constructor(group,idRow,idCol,row,col,partSide,pos,up,right,down,left) {
		this.group = group;
		this.idRow = idRow;
		this.idCol = idCol;
		this.row = row;
		this.col = col;
		this.partSide = partSide;
		this.pos = pos;
		this.up = up;
		this.right = right;
		this.down = down;
		this.left = left;
	}
	setGroup(groupId) {
		this.group = groupId;
	}
	setRow(row) {
		this.row = row;
	}
	setCol(col) {
		this.col = col;
	}
	setPos(pos) {
		this.pos = pos;
	}
	displacement() {
		return this.partSide * (Cts.partsN - 2);
	}
	overlay(other) {
		let dx = other.pos.x - this.pos.x;
		let dy = other.pos.y - this.pos.y;
		let adx = Math.abs(dx);
		let ady = Math.abs(dy);
		let dif = dm_Device.isBig ? this.partSide * 2 : this.partSide;
		let side = this.displacement();
		if(adx < dif) {
			if(ady > side - dif && ady < side + dif) {
				if(dy < 0) {
					if(this.idRow == other.idRow + 1 && this.idCol == other.idCol) {
						return dm_Option.Some(Direction.DOWN);
					} else {
						return dm_Option.None;
					}
				} else if(this.idRow == other.idRow - 1 && this.idCol == other.idCol) {
					return dm_Option.Some(Direction.UP);
				} else {
					return dm_Option.None;
				}
			} else {
				return dm_Option.None;
			}
		} else if(ady < dif) {
			if(adx > side - dif && adx < side + dif) {
				if(dx < 0) {
					if(this.idRow == other.idRow && this.idCol == other.idCol + 1) {
						return dm_Option.Some(Direction.RIGHT);
					} else {
						return dm_Option.None;
					}
				} else if(this.idRow == other.idRow && this.idCol == other.idCol - 1) {
					return dm_Option.Some(Direction.LEFT);
				} else {
					return dm_Option.None;
				}
			} else {
				return dm_Option.None;
			}
		} else {
			return dm_Option.None;
		}
	}
	blanks() {
		let centerSide = this.partSide * (Cts.partsN - 6);
		let rup = [];
		let rright = [];
		let rdown = [];
		let rleft = [];
		rup.push(new dm_Rectangle(0,0,this.partSide * 3,this.partSide));
		rup.push(new dm_Rectangle(this.partSide * (Cts.partsN - 3),0,this.partSide * 3,this.partSide));
		if(this.up == 0) {
			rup.push(new dm_Rectangle(this.partSide * 3,0,centerSide,this.partSide));
		} else if(this.up == -1) {
			rup.push(new dm_Rectangle(this.partSide * 3,0,centerSide,this.partSide * 2));
		}
		rdown.push(new dm_Rectangle(0,this.partSide * (Cts.partsN - 1),this.partSide * 3,this.partSide));
		rdown.push(new dm_Rectangle(this.partSide * (Cts.partsN - 3),this.partSide * (Cts.partsN - 1),this.partSide * 3,this.partSide));
		if(this.down == 0) {
			rdown.push(new dm_Rectangle(this.partSide * 3,this.partSide * (Cts.partsN - 1),centerSide,this.partSide));
		} else if(this.down == -1) {
			rdown.push(new dm_Rectangle(this.partSide * 3,this.partSide * (Cts.partsN - 2),centerSide,this.partSide * 2));
		}
		rleft.push(new dm_Rectangle(0,0,this.partSide,this.partSide * 3));
		rleft.push(new dm_Rectangle(0,this.partSide * (Cts.partsN - 3),this.partSide,this.partSide * 3));
		if(this.left == 0) {
			rleft.push(new dm_Rectangle(0,this.partSide * 3,this.partSide,centerSide));
		} else if(this.left == -1) {
			rleft.push(new dm_Rectangle(0,this.partSide * 3,this.partSide * 2,centerSide));
		}
		rright.push(new dm_Rectangle(this.partSide * (Cts.partsN - 1),0,this.partSide,this.partSide * 3));
		rright.push(new dm_Rectangle(this.partSide * (Cts.partsN - 1),this.partSide * (Cts.partsN - 3),this.partSide,this.partSide * 3));
		if(this.right == 0) {
			rright.push(new dm_Rectangle(this.partSide * (Cts.partsN - 1),this.partSide * 3,this.partSide,centerSide));
		} else if(this.right == -1) {
			rright.push(new dm_Rectangle(this.partSide * (Cts.partsN - 2),this.partSide * 3,this.partSide * 2,centerSide));
		}
		return { up : rup, right : rright, down : rdown, left : rleft};
	}
	toJs() {
		return dm_Js.wa([dm_Js.wi(this.group),dm_Js.wi(this.idRow),dm_Js.wi(this.idCol),dm_Js.wi(this.row),dm_Js.wi(this.col),dm_Js.wi(this.partSide),this.pos.toJs(),dm_Js.wi(this.up),dm_Js.wi(this.right),dm_Js.wi(this.down),dm_Js.wi(this.left)]);
	}
	static fromJs(js) {
		let a = js.ra();
		return new data_Piece(a[0].ri(),a[1].ri(),a[2].ri(),a[3].ri(),a[4].ri(),a[5].ri(),dm_Point.fromJs(a[6]),a[7].ri(),a[8].ri(),a[9].ri(),a[10].ri());
	}
}
data_Piece.__name__ = true;
Object.assign(data_Piece.prototype, {
	__class__: data_Piece
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			let debug = pos > 0;
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let c2 = b[i++];
					let code = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let c2 = b[i++];
					let c3 = b[i++];
					let u = (c & 15) << 18 | (c2 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
}
haxe_io_Bytes.__name__ = true;
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
class haxe_crypto_Base64 {
	static encode(bytes,complement) {
		if(complement == null) {
			complement = true;
		}
		let str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
		if(complement) {
			switch(bytes.length % 3) {
			case 1:
				str += "==";
				break;
			case 2:
				str += "=";
				break;
			default:
			}
		}
		return str;
	}
}
haxe_crypto_Base64.__name__ = true;
class dm_B64 {
	static encode(s) {
		return haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(s));
	}
}
dm_B64.__name__ = true;
class dm_Dt {
	static to(d) {
		return DateTools.format(d,"%Y%m%d");
	}
}
dm_Dt.__name__ = true;
class dm_Exc {
	static show(msg,pos) {
		return "" + pos.fileName + "." + pos.methodName + ":" + pos.lineNumber + ": " + msg;
	}
	static illegalArgument(argumentName,expected,actual,pos) {
		return dm_Exc.show("Illegal argument : Variable \"" + argumentName + "\"\n" + ("Expected: " + Std.string(expected) + "\nActual: " + Std.string(actual)),pos);
	}
}
dm_Exc.__name__ = true;
class dm_It {
	constructor(hasNext,next) {
		this.hasNext = hasNext;
		this.next = next;
	}
	find(fn) {
		while(this.hasNext()) {
			let e = this.next();
			if(fn(e)) {
				return dm_Option.Some(e);
			}
		}
		return dm_Option.None;
	}
	some(fn) {
		while(this.hasNext()) if(fn(this.next())) {
			return true;
		}
		return false;
	}
	to() {
		let r = [];
		while(this.hasNext()) r.push(this.next());
		return r;
	}
	map(fn,fn2) {
		let _gthis = this;
		if(fn2 == null) {
			return new dm_It(function() {
				return _gthis.hasNext();
			},function() {
				return fn(_gthis.next());
			});
		} else {
			let isFirst = true;
			return new dm_It(function() {
				return _gthis.hasNext();
			},function() {
				if(isFirst) {
					isFirst = false;
					return fn(_gthis.next());
				} else {
					return fn2(_gthis.next());
				}
			});
		}
	}
	reverse() {
		let tmp = this.to();
		tmp.reverse();
		return dm_It.from(tmp);
	}
	shuffle() {
		let a = this.to();
		dm_Rnd.shuffle(a);
		return dm_It.from(a);
	}
	static from(i) {
		let it = $getIterator(i);
		return new dm_It($bind(it,it.hasNext),$bind(it,it.next));
	}
	static range(begin,end) {
		if(end == null) {
			end = begin;
			begin = 0;
		}
		let c = begin;
		return new dm_It(function() {
			return c < end;
		},function() {
			c += 1;
			return c - 1;
		});
	}
}
dm_It.__name__ = true;
Object.assign(dm_It.prototype, {
	__class__: dm_It
});
class dm_Js {
	constructor(js) {
		this.js = js;
	}
	getType() {
		return Std.string(Type.typeof(this.js));
	}
	to() {
		return JSON.stringify(this.js);
	}
	isNull() {
		return this.js == null;
	}
	rb() {
		try {
			return js_Boot.__cast(this.js , Bool);
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","Bool",this.getType(),{ fileName : "lib/dm/Js.hx", lineNumber : 104, className : "dm.Js", methodName : "rb"}));
			} else {
				throw _g;
			}
		}
	}
	ri() {
		try {
			return js_Boot.__cast(this.js , Int);
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","Int",this.getType(),{ fileName : "lib/dm/Js.hx", lineNumber : 112, className : "dm.Js", methodName : "ri"}));
			} else {
				throw _g;
			}
		}
	}
	rs() {
		try {
			return js_Boot.__cast(this.js , String);
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","String",this.getType(),{ fileName : "lib/dm/Js.hx", lineNumber : 128, className : "dm.Js", methodName : "rs"}));
			} else {
				throw _g;
			}
		}
	}
	ra() {
		try {
			let a = [];
			let _g = 0;
			let _g1 = js_Boot.__cast(this.js , Array);
			while(_g < _g1.length) {
				let e = _g1[_g];
				++_g;
				a.push(new dm_Js(e));
			}
			return a;
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","Array<Js>",this.getType(),{ fileName : "lib/dm/Js.hx", lineNumber : 138, className : "dm.Js", methodName : "ra"}));
			} else {
				throw _g;
			}
		}
	}
	rArray(ffrom) {
		let _this = this.ra();
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = ffrom(_this[i]);
		}
		return result;
	}
	static from(s) {
		try {
			return new dm_Js(JSON.parse(s));
		} catch( _g ) {
			throw haxe_Exception.thrown(dm_Exc.illegalArgument("s = " + s,"Json string","Invalid Json",{ fileName : "lib/dm/Js.hx", lineNumber : 30, className : "dm.Js", methodName : "from"}));
		}
	}
	static wn() {
		return new dm_Js(null);
	}
	static wb(b) {
		return new dm_Js(b);
	}
	static wi(i) {
		return new dm_Js(i);
	}
	static ws(s) {
		return new dm_Js(s);
	}
	static wa(a) {
		let jsa = [];
		let _g = 0;
		while(_g < a.length) {
			let e = a[_g];
			++_g;
			jsa.push(e.js);
		}
		return new dm_Js(jsa);
	}
	static wArray(it,fto) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			_g.push(fto(x1));
		}
		return dm_Js.wa(_g);
	}
}
dm_Js.__name__ = true;
Object.assign(dm_Js.prototype, {
	__class__: dm_Js
});
class dm_MenuEntry {
	constructor(id,wg) {
		this.id = id;
		this.wg = wg;
	}
}
dm_MenuEntry.__name__ = true;
Object.assign(dm_MenuEntry.prototype, {
	__class__: dm_MenuEntry
});
class dm_Menu {
	constructor(lopts,ropts,selected,withSeparator) {
		if(withSeparator == null) {
			withSeparator = false;
		}
		this.wg = dm_Ui.Q("div");
		let setId = function(o) {
			let _g = o.id;
			switch(_g._hx_index) {
			case 0:
				let v = _g.v;
				o.wg.klass(v == selected ? "frame" : "link");
				break;
			case 1:
				break;
			}
		};
		let _g = 0;
		while(_g < lopts.length) {
			let o = lopts[_g];
			++_g;
			setId(o);
		}
		let _g1 = 0;
		while(_g1 < ropts.length) {
			let o = ropts[_g1];
			++_g1;
			setId(o);
		}
		this.wg.add(dm_Ui.Q("table").klass("main").add(dm_Ui.Q("tr").add(dm_Ui.Q("td").style("text-align:left;padding-right:4px;" + "${withSeparator ? 'border-right: 1px solid #000000;' : ''}").adds(dm_It.from(lopts).map(function(e) {
			return e.wg;
		}).to())).add(dm_Ui.Q("td").style("padding-left:4px;vertical-align:top;" + "text-align:right;white-space:nowrap").adds(dm_It.from(ropts).map(function(e) {
			return e.wg;
		}).to())))).add(dm_Ui.Q("hr"));
	}
	static separator() {
		return new dm_MenuEntry(dm_Option.None,dm_Ui.Q("span").text(" · "));
	}
	static toption(id,tx,f) {
		return new dm_MenuEntry(dm_Option.Some(id),dm_Ui.link(function(_) {
			f();
		}).html(tx));
	}
}
dm_Menu.__name__ = true;
Object.assign(dm_Menu.prototype, {
	__class__: dm_Menu
});
class dm_ModalBox {
	constructor(content,withClose) {
		if(withClose == null) {
			withClose = true;
		}
		let tb = dm_Ui.Q("table").att("align","center").style("background-color: rgb(250, 250, 250);" + "border: 1px solid rgb(110,130,150);" + "padding: 4px;border-radius: 4px;");
		let _gthis = this;
		if(withClose) {
			tb.add(dm_Ui.Q("tr").add(dm_Ui.Q("td").style("width:100%;text-align:right;padding-bottom:5px").add(dm_Ui.Q("span").text("[")).add(dm_Ui.link(function(_) {
				_gthis.show(false);
			}).style("cursor:pointer;text-decoration: none; font-family: sans;" + "color: #000080;font-weight: normal;font-size:14px;").text(" X ")).add(dm_Ui.Q("span").text("]"))));
		}
		tb.add(dm_Ui.Q("tr").add(dm_Ui.Q("td").add(content)));
		this.wg = dm_Ui.Q("div").style("display: none;" + "position: fixed;" + "z-index: 1;" + "padding-top: 100px;" + "left: 0;" + "top: 0;" + "width: 100%;" + "height: 100%;" + "overflow: auto;" + "background-color: rgb(0,0,0);" + "background-color: rgba(0,0,0,0.4);" + "text-align: center;").add(tb);
	}
	show(value) {
		if(value) {
			this.wg.setStyle("display","block");
		} else {
			this.wg.setStyle("display","none");
		}
	}
}
dm_ModalBox.__name__ = true;
Object.assign(dm_ModalBox.prototype, {
	__class__: dm_ModalBox
});
var dm_Option = $hxEnums["dm.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"dm.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"dm.Option",toString:$estr}
};
class dm_Opt {
	static oget(o,v) {
		if(o._hx_index == 0) {
			let value = o.v;
			return value;
		} else {
			return v;
		}
	}
	static eget(o) {
		if(o._hx_index == 0) {
			let value = o.v;
			return value;
		} else {
			throw haxe_Exception.thrown("Option is None");
		}
	}
}
dm_Opt.__name__ = true;
class dm_Point {
	constructor(x,y) {
		this.x = x;
		this.y = y;
	}
	toJs() {
		return dm_Js.wa([dm_Js.wi(this.x),dm_Js.wi(this.y)]);
	}
	static fromJs(js) {
		let a = js.ra();
		return new dm_Point(a[0].ri(),a[1].ri());
	}
}
dm_Point.__name__ = true;
Object.assign(dm_Point.prototype, {
	__class__: dm_Point
});
class dm_Pointer {
	static docScroll() {
		return new dm_Point(window.document.documentElement.scrollLeft + window.document.body.scrollLeft,window.document.documentElement.scrollTop + window.document.body.scrollTop);
	}
	static bounds(e) {
		let sc = dm_Pointer.docScroll();
		let bs = e.getBoundingClientRect();
		return new dm_Rectangle((bs.left | 0) + sc.x,(bs.top | 0) + sc.y,bs.width | 0,bs.height | 0);
	}
	static absolute(ev) {
		let sc = dm_Pointer.docScroll();
		try {
			let tev = js_Boot.__cast(ev , TouchEvent);
			let x = tev.changedTouches[0].clientX;
			let y = tev.changedTouches[0].clientY;
			return new dm_Point(x + sc.x,y + sc.y);
		} catch( _g ) {
			return new dm_Point(ev.clientX + sc.x,ev.clientY + sc.y);
		}
	}
	static relative(abs,e) {
		let sc = dm_Pointer.docScroll();
		let bs = e.getBoundingClientRect();
		return new dm_Point(abs.x - (bs.left | 0) - sc.x,abs.y - (bs.top | 0) - sc.y);
	}
	static copyEvent(ev) {
		return { altKey : ev.altKey, button : ev.button, buttons : ev.buttons, clientX : ev.clientX, clientY : ev.clientY, ctrlKey : ev.ctrlKey, metaKey : ev.metaKey, movementX : ev.movementX, movementY : ev.movementY, relatedTarget : ev.relatedTarget, shiftKey : ev.shiftKey, bubbles : ev.bubbles, composed : ev.composed, view : ev.view, screenX : ev.screenX, screenY : ev.screenY, detail : ev.detail, cancelable : ev.cancelable};
	}
	static copyTouchEvent(ev) {
		return { altKey : ev.altKey, touches : ev.touches == null ? null : dm_It.range(ev.touches.length).map(function(i) {
			return ev.touches.item(i);
		}).to(), targetTouches : ev.targetTouches == null ? null : dm_It.range(ev.targetTouches.length).map(function(i) {
			return ev.targetTouches.item(i);
		}).to(), changedTouches : ev.changedTouches == null ? null : dm_It.range(ev.changedTouches.length).map(function(i) {
			return ev.changedTouches.item(i);
		}).to(), ctrlKey : ev.ctrlKey, metaKey : ev.metaKey, shiftKey : ev.shiftKey, bubbles : ev.bubbles, composed : ev.composed, view : ev.view, detail : ev.detail, cancelable : ev.cancelable};
	}
}
dm_Pointer.__name__ = true;
class dm_Rectangle {
	constructor(x,y,width,height) {
		if(width < 0) {
			throw new haxe_Exception("width < 0");
		}
		if(height < 0) {
			throw new haxe_Exception("height < 0");
		}
		this.x = x;
		this.y = y;
		this.w = width;
		this.h = height;
	}
	contains(p) {
		if(p.x >= this.x && p.x < this.x + this.w && p.y >= this.y) {
			return p.y < this.y + this.h;
		} else {
			return false;
		}
	}
}
dm_Rectangle.__name__ = true;
Object.assign(dm_Rectangle.prototype, {
	__class__: dm_Rectangle
});
class dm_Rnd {
	static i(n) {
		if(n < 0) {
			n = 0;
		}
		return Math.floor(Math.random() * n);
	}
	static shuffle(a) {
		let j;
		let tmp;
		let i = a.length;
		while(i > 1) {
			j = Math.floor(Math.random() * i--);
			tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}
}
dm_Rnd.__name__ = true;
class dm_Sprite {
	constructor(board,canvas,draggable) {
		if(draggable == null) {
			draggable = false;
		}
		this.added = false;
		this.drops = [];
		this.dragMoves = [];
		this.dragStarts = [];
		this.dragInc = new dm_Point(0,0);
		this.blanks = [];
		this.board = board;
		this.canvas = canvas;
		let w2 = canvas.width / 2 | 0;
		let h2 = canvas.height / 2 | 0;
		this.boundx = -w2;
		this.boundy = -h2;
		this.boundx2 = board.canvas.width - w2;
		this.boundy2 = board.canvas.height - h2;
		canvas.style.setProperty("display","block");
		canvas.style.setProperty("position","absolute");
		canvas.style.setProperty("z-index","1000");
		canvas.style.setProperty("transition-property","transform");
		canvas.style.setProperty("transition-timing-function","ease-out");
		this.setDraggable(draggable);
	}
	addBlank(area) {
		this.blanks.push(area);
		return this;
	}
	inBlank(abs) {
		let _g = 0;
		let _g1 = this.blanks;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			if(b.contains(dm_Pointer.relative(abs,this.canvas))) {
				return true;
			}
		}
		return false;
	}
	put(x,y) {
		this.canvas.style.left = x + "px";
		this.canvas.style.top = y + "px";
		this.board.addCanvas(this.canvas);
		this.added = true;
		return this;
	}
	moveTo(x,y,time) {
		let cx = this.canvas.style.left != null ? Std.parseInt(this.canvas.style.left) : 0;
		let cy = this.canvas.style.top != null ? Std.parseInt(this.canvas.style.top) : 0;
		let _gthis = this;
		this.canvas.style.setProperty("transform","translate(" + (x - cx) + "px, " + (y - cy) + "px)");
		this.canvas.style.setProperty("transition-duration","" + time + "ms");
		haxe_Timer.delay(function() {
			_gthis.put(x,y);
			_gthis.canvas.style.removeProperty("transition-duration");
			_gthis.canvas.style.removeProperty("transform");
		},time + 50);
		return this;
	}
	quit() {
		this.board.removeCanvas(this.canvas);
		this.added = false;
		return this;
	}
	setZindex(o) {
		this.canvas.style.setProperty("z-index",o == null ? "null" : "" + o);
		return this;
	}
	setDraggable(value) {
		let _gthis = this;
		if(value == false) {
			if(this.fnDown != null) {
				this.removeMouseDown(this.fnDown);
			}
			return this;
		}
		let fnPut = function(abs) {
			let absCorner = new dm_Point(abs.x - _gthis.dragInc.x,abs.y - _gthis.dragInc.y);
			let rel = dm_Pointer.relative(absCorner,_gthis.board.canvas);
			if(rel.x < _gthis.boundx) {
				rel = new dm_Point(_gthis.boundx,rel.y);
			}
			if(rel.x > _gthis.boundx2) {
				rel = new dm_Point(_gthis.boundx2,rel.y);
			}
			if(rel.y < _gthis.boundy) {
				rel = new dm_Point(rel.x,_gthis.boundy);
			}
			if(rel.y > _gthis.boundy2) {
				rel = new dm_Point(rel.x,_gthis.boundy2);
			}
			_gthis.put(rel.x,rel.y);
		};
		this.fnMove = function(ev) {
			let abs = dm_Pointer.absolute(ev);
			fnPut(abs);
			let _g = 0;
			let _g1 = _gthis.dragMoves;
			while(_g < _g1.length) {
				let fn = _g1[_g];
				++_g;
				if(!fn(ev)) {
					_gthis.removeMouseMove(_gthis.fnMove);
					_gthis.removeMouseUp(_gthis.fnUp);
					_gthis.removeMouseOut(_gthis.fnOut);
					return;
				}
			}
		};
		this.fnOut = function(ev) {
			let abs = dm_Pointer.absolute(ev);
			fnPut(abs);
			let _g = 0;
			let _g1 = _gthis.dragMoves;
			while(_g < _g1.length) {
				let fn = _g1[_g];
				++_g;
				if(!fn(ev)) {
					_gthis.removeMouseMove(_gthis.fnMove);
					_gthis.removeMouseUp(_gthis.fnUp);
					_gthis.removeMouseOut(_gthis.fnOut);
					return;
				}
			}
			let rel = dm_Pointer.relative(abs,_gthis.board.canvas);
			if(!new dm_Rectangle(0,0,_gthis.board.get_width(),_gthis.board.get_height()).contains(rel)) {
				_gthis.removeMouseMove(_gthis.fnMove);
				_gthis.removeMouseUp(_gthis.fnUp);
				_gthis.removeMouseOut(_gthis.fnOut);
				let _g = 0;
				let _g1 = _gthis.drops;
				while(_g < _g1.length) {
					let fn = _g1[_g];
					++_g;
					fn(ev);
				}
			}
		};
		this.fnUp = function(ev) {
			_gthis.removeMouseMove(_gthis.fnMove);
			_gthis.removeMouseUp(_gthis.fnUp);
			_gthis.removeMouseOut(_gthis.fnOut);
			let _g = 0;
			let _g1 = _gthis.drops;
			while(_g < _g1.length) {
				let fn = _g1[_g];
				++_g;
				fn(ev);
			}
		};
		this.fnDown = function(ev) {
			let abs = dm_Pointer.absolute(ev);
			_gthis.dragInc = dm_Pointer.relative(abs,_gthis.canvas);
			let _g = 0;
			let _g1 = _gthis.blanks;
			while(_g < _g1.length) {
				let b = _g1[_g];
				++_g;
				if(b.contains(_gthis.dragInc)) {
					return;
				}
			}
			ev.stopPropagation();
			ev.preventDefault();
			let _g2 = 0;
			let _g3 = _gthis.dragStarts;
			while(_g2 < _g3.length) {
				let fn = _g3[_g2];
				++_g2;
				if(!fn(ev)) {
					return;
				}
			}
			fnPut(abs);
			_gthis.addMouseMove(_gthis.fnMove);
			_gthis.addMouseUp(_gthis.fnUp);
			_gthis.addMouseOut(_gthis.fnOut);
		};
		this.addMouseDown(this.fnDown);
		return this;
	}
	addDrop(fn) {
		if(!this.drops.includes(fn)) {
			this.drops.push(fn);
		}
		return this;
	}
	addMouseDown(fn) {
		if(dm_Device.isMobil) {
			this.canvas.addEventListener("touchstart",fn);
		} else {
			this.canvas.addEventListener("mousedown",fn);
		}
		return this;
	}
	removeMouseDown(fn) {
		this.canvas.removeEventListener("mousedown",fn);
		if(dm_Device.isMobil) {
			this.canvas.removeEventListener("touchstart",fn);
		}
		return this;
	}
	addMouseUp(fn) {
		if(dm_Device.isMobil) {
			this.canvas.addEventListener("touchend",fn);
		} else {
			this.canvas.addEventListener("mouseup",fn);
		}
		return this;
	}
	removeMouseUp(fn) {
		if(dm_Device.isMobil) {
			this.canvas.removeEventListener("touchend",fn);
		} else {
			this.canvas.removeEventListener("mouseup",fn);
		}
		return this;
	}
	addMouseMove(fn) {
		if(dm_Device.isMobil) {
			this.canvas.addEventListener("touchmove",fn);
		} else {
			this.canvas.addEventListener("mousemove",fn);
		}
		return this;
	}
	removeMouseMove(fn) {
		if(dm_Device.isMobil) {
			this.canvas.addEventListener("touchmove",fn);
		} else {
			this.canvas.removeEventListener("mousemove",fn);
		}
		return this;
	}
	addMouseOut(fn) {
		this.canvas.addEventListener("mouseout",fn);
		return this;
	}
	removeMouseOut(fn) {
		this.canvas.removeEventListener("mouseout",fn);
		return this;
	}
}
dm_Sprite.__name__ = true;
Object.assign(dm_Sprite.prototype, {
	__class__: dm_Sprite
});
class dm_Store {
	static clear(prefix) {
		let _g = 0;
		let _g1 = dm_Store.keys().to();
		while(_g < _g1.length) {
			let k = _g1[_g];
			++_g;
			if(StringTools.startsWith(k,prefix)) {
				dm_Store.del(k);
			}
		}
	}
	static del(key) {
		localStorage.removeItem(key);
	}
	static get(key) {
		let r = localStorage.getItem(key);
		if(r == null) {
			return dm_Option.None;
		} else {
			return dm_Option.Some(r);
		}
	}
	static key(ix) {
		return localStorage.key(ix);
	}
	static keys() {
		let sz = dm_Store.length();
		let c = 0;
		return new dm_It(function() {
			return c < sz;
		},function() {
			c += 1;
			return dm_Store.key(c - 1);
		});
	}
	static put(key,value) {
		localStorage.setItem(key, value);
	}
	static length() {
		return localStorage.length;
	}
	static oget(key,fn,value) {
		try {
			let _g = dm_Store.get(key);
			switch(_g._hx_index) {
			case 0:
				let l = _g.v;
				return fn(l);
			case 1:
				return value;
			}
		} catch( _g ) {
			return value;
		}
	}
}
dm_Store.__name__ = true;
class haxe_IMap {
}
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = true;
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_crypto_BaseCode {
	constructor(base) {
		let len = base.length;
		let nbits = 1;
		while(len > 1 << nbits) ++nbits;
		if(nbits > 8 || len != 1 << nbits) {
			throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
		}
		this.base = base;
		this.nbits = nbits;
	}
	encodeBytes(b) {
		let nbits = this.nbits;
		let base = this.base;
		let size = b.length * 8 / nbits | 0;
		let out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		let buf = 0;
		let curbits = 0;
		let mask = (1 << nbits) - 1;
		let pin = 0;
		let pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
}
haxe_crypto_BaseCode.__name__ = true;
Object.assign(haxe_crypto_BaseCode.prototype, {
	__class__: haxe_crypto_BaseCode
});
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
}
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
});
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
}
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
class model_Audio {
	constructor(value) {
		this.setValue(value);
	}
	setValue(value) {
		dm_Store.put(model_Audio.storeKey,value ? "1" : "0");
		this.value = value;
	}
	static mk() {
		return new model_Audio(dm_Store.oget(model_Audio.storeKey,function(v) {
			if(v == "1") {
				return true;
			} else {
				return false;
			}
		},true));
	}
}
model_Audio.__name__ = true;
Object.assign(model_Audio.prototype, {
	__class__: model_Audio
});
class model_Group {
	constructor(group) {
		this.setValue(group);
	}
	setValue(group) {
		dm_Store.put(model_Group.storeKey,group == null ? "null" : "" + group);
		this.value = group;
	}
	static mk() {
		return new model_Group(dm_Store.oget(model_Group.storeKey,function(v) {
			return Std.parseInt(v);
		},0));
	}
}
model_Group.__name__ = true;
Object.assign(model_Group.prototype, {
	__class__: model_Group
});
class model_Level {
	constructor(level) {
		this.setValue(level);
	}
	setValue(level) {
		dm_Store.put(model_Level.storeKey,level == null ? "null" : "" + level);
		this.value = level;
	}
	static mk() {
		return new model_Level(dm_Store.oget(model_Level.storeKey,function(v) {
			return Std.parseInt(v);
		},0));
	}
}
model_Level.__name__ = true;
Object.assign(model_Level.prototype, {
	__class__: model_Level
});
class model_OrientationChanged {
	constructor(value) {
		this.setValue(value);
	}
	setValue(value) {
		dm_Store.put(model_OrientationChanged.storeKey,value ? "1" : "0");
		this.value = value;
	}
	static mk() {
		let _g = dm_Store.get(model_OrientationChanged.storeKey);
		let tmp;
		switch(_g._hx_index) {
		case 0:
			let v = _g.v;
			tmp = v == "1";
			break;
		case 1:
			tmp = false;
			break;
		}
		return new model_OrientationChanged(tmp);
	}
}
model_OrientationChanged.__name__ = true;
Object.assign(model_OrientationChanged.prototype, {
	__class__: model_OrientationChanged
});
var model_PageType = $hxEnums["model.PageType"] = { __ename__ : true, __constructs__ : ["INDEX","PICTURE"]
	,INDEX: {_hx_index:0,__enum__:"model.PageType",toString:$estr}
	,PICTURE: ($_=function(jigsaw) { return {_hx_index:1,jigsaw:jigsaw,__enum__:"model.PageType",toString:$estr}; },$_.__params__ = ["jigsaw"],$_)
};
class model_Page {
	constructor(type) {
		this.setValue(type);
	}
	setValue(type) {
		let tmp;
		switch(type._hx_index) {
		case 0:
			tmp = "INDEX";
			break;
		case 1:
			let j = type.jigsaw;
			tmp = j.toJs().to();
			break;
		}
		dm_Store.put(model_Page.storeKey,tmp);
		this.value = type;
	}
	static mkType(t) {
		if(t == "INDEX") {
			return model_PageType.INDEX;
		} else {
			return model_PageType.PICTURE(data_Jigsaw.fromJs(dm_Js.from(t)));
		}
	}
	static mk() {
		return new model_Page(dm_Store.oget(model_Page.storeKey,function(v) {
			return model_Page.mkType(v);
		},model_PageType.INDEX));
	}
}
model_Page.__name__ = true;
Object.assign(model_Page.prototype, {
	__class__: model_Page
});
class model_Solved {
	constructor(js) {
		this.values = js.rArray(function(e) {
			let a = e.ra();
			return { level : a[0].ri(), pict : a[1].rs()};
		});
	}
	toJs() {
		return dm_Js.wArray(this.values,function(e) {
			return dm_Js.wa([dm_Js.wi(e.level),dm_Js.ws(e.pict)]);
		});
	}
	add(level,pict) {
		let picts = Loader.getAllPicts();
		if(!this.contains(level,pict)) {
			this.values.push({ level : level, pict : pict});
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this.values;
		while(_g1 < _g2.length) {
			let v = _g2[_g1];
			++_g1;
			let v1 = v;
			if(dm_It.from(picts).some(function(e) {
				return e.name == v1.pict;
			})) {
				_g.push(v);
			}
		}
		this.values = _g;
		dm_Store.put(model_Solved.storeKey,this.toJs().to());
	}
	addFrom(other) {
		let _g = 0;
		let _g1 = other.values;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			if(!dm_It.from(this.values).some(function(v) {
				if(v.level == e.level) {
					return v.pict == e.pict;
				} else {
					return false;
				}
			})) {
				this.add(e.level,e.pict);
			}
		}
	}
	contains(level,pict) {
		let _g = 0;
		let _g1 = this.values;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			if(v.level == level && v.pict == pict) {
				return true;
			}
		}
		return false;
	}
	static mk() {
		return new model_Solved(dm_Store.oget(model_Solved.storeKey,function(v) {
			return dm_Js.from(v);
		},dm_Js.wa([])));
	}
}
model_Solved.__name__ = true;
Object.assign(model_Solved.prototype, {
	__class__: model_Solved
});
class view_CongratulationsBox {
	constructor(name,level) {
		this.box = dm_Ui.Q("div").style("display: none;" + "position: fixed;" + "z-index: 1;" + "padding-top: 100px;" + "left: 0;" + "top: 0;" + "width: 100%;" + "height: 100%;" + "overflow: auto;" + "background-color: rgb(0,0,0);" + "background-color: rgba(0,0,0,0.4);" + "text-align: center;");
		this.acceptWg = dm_Ui.Q("button");
		this.name = name;
		this.level = level;
		this.box.add(this.mkContent());
	}
	accept() {
		this.box.setStyle("display","none");
		haxe_Timer.delay(function() {
			$global.location.reload();
		},200);
	}
	show() {
		View.modalBoxDiv.removeAll().add(this.box);
		this.box.setStyle("display","block");
		this.acceptWg.e.focus();
	}
	mkContent() {
		return dm_Ui.Q("table").att("align","center").add(dm_Ui.Q("tr").add(dm_Ui.Q("td").klass("congratulations").add(dm_Ui.Q("div").html("<big><big>" + I18n._("Congratulations!!!") + "</big></big>")).add(dm_Ui.Q("div").add(Loader.mkIcon(dm_It.from(Loader.wins).shuffle().to()[0].i))).add(dm_Ui.Q("div").html("<big>" + I18n._args(I18n._("Jigsaw<br>correctly finished"),[this.name,this.level]) + "</big>")).add(dm_Ui.Q("hr")).add(dm_Ui.Q("div").add(this.acceptWg.text(I18n._("Accept")).on(dm_ActionType.CLICK,$bind(this,this.accept))))));
	}
}
view_CongratulationsBox.__name__ = true;
Object.assign(view_CongratulationsBox.prototype, {
	__class__: view_CongratulationsBox
});
class view_HelpBox {
	constructor() {
		this.menuDiv = dm_Ui.Q("div");
		this.bodyDiv = dm_Ui.Q("div");
		this.wg = dm_Ui.Q("div");
		this.bodyDiv.klass("frame").style("width: " + (Cts.boardDim.w * 0.8 | 0) + "px;" + ("height: " + (Cts.boardDim.h * 0.8 | 0) + "px;") + "overflow-x: hidden;" + "overflow-y: auto;" + "text-align: left;" + ("padding: " + (dm_Device.isBig ? 40 : 20) + "px;"));
		this.box = new dm_ModalBox(this.wg,false);
		this.menuOption = "index";
		this.wg.add(dm_Ui.Q("table").klass("main").add(dm_Ui.Q("tr").add(dm_Ui.Q("td").add(this.menuDiv).add(this.bodyDiv))));
	}
	replacement(tx) {
		tx = StringTools.replace(StringTools.replace(tx,"${LED}",Std.string(window.devicePixelRatio * 6 | 0)),"${APP_DATE}",Cts.appVersion.substring(0,4));
		if(dm_Device.isBig) {
			return StringTools.replace(tx,"${IMG_DIM}","M");
		} else {
			return StringTools.replace(tx,"${IMG_DIM}","");
		}
	}
	menuSel(option) {
		this.menuOption = option;
		this.update();
	}
	close() {
		this.box.show(false);
	}
	show(parent) {
		parent.removeAll().add(this.box.wg);
		this.box.show(true);
		this.update();
	}
	update() {
		let _gthis = this;
		let lopts = [dm_Menu.toption("index",I18n._("Index"),function() {
			_gthis.menuSel("index");
		}),dm_Menu.separator(),dm_Menu.toption("play",I18n._("Play"),function() {
			_gthis.menuSel("play");
		}),dm_Menu.separator(),dm_Menu.toption("credits",I18n._("Credits"),function() {
			_gthis.menuSel("credits");
		})];
		let ropts = [dm_Menu.toption("close",I18n._("Close"),$bind(this,this.close))];
		let menu = new dm_Menu(lopts,ropts,this.menuOption);
		this.menuDiv.removeAll().add(menu.wg);
		let url;
		switch(this.menuOption) {
		case "credits":
			url = "pg3";
			break;
		case "play":
			url = "pg2";
			break;
		default:
			url = "pg1";
		}
		dm_Ui.upload("help/" + url + "-" + I18n.lang + ".html",function(tx) {
			_gthis.bodyDiv.removeAll().html(_gthis.replacement(tx));
		});
	}
}
view_HelpBox.__name__ = true;
Object.assign(view_HelpBox.prototype, {
	__class__: view_HelpBox
});
class view_Index {
	constructor() {
		this.wg = dm_Ui.Q("div");
	}
	setLevel(l) {
		Model.level.setValue(l);
		this.update();
	}
	setGroup(i) {
		Model.group.setValue(i);
		Loader.load($bind(this,this.update));
	}
	delMarks() {
		if(dm_Ui.confirm(I18n._("Remove 'done marks' from jigsaws?"))) {
			let level = Model.level.value;
			let group = Model.group.value;
			dm_Store.clear(Cts.storeKey);
			Model.level.setValue(level);
			Model.group.setValue(group);
			$global.location.reload();
		}
	}
	help() {
		new view_HelpBox().show(View.modalBoxDiv);
	}
	open() {
		new view_OpenBox().show();
	}
	selPicture(p) {
		Model.page.setValue(model_PageType.PICTURE(data_Jigsaw.mk(p.name,Model.level.value)));
		View.update();
	}
	show(parent) {
		parent.removeAll().add(this.wg);
		this.update();
	}
	update() {
		let currentLevel = Model.level.value;
		let _gthis = this;
		let mkTick = function(l) {
			let mkTick = l == currentLevel ? "&nbsp;✓" : "";
			return dm_Ui.Q("td").style("padding-right:0px").html(mkTick);
		};
		let mkLevelWg = function(l) {
			if(l == currentLevel) {
				return dm_Ui.Q("td").text(Cts.get_levels()[l]);
			} else {
				return dm_Ui.Q("td").add(dm_Ui.link(function(e) {
					_gthis.setLevel(l);
				}).klass("link").text(Cts.get_levels()[l]));
			}
		};
		let sel = dm_Ui.Q("table").att("align","center").att("cellspacing","0").add(dm_Ui.Q("tr").add(dm_Ui.Q("td")).add(mkTick(0)).add(mkLevelWg(0))).add(dm_Ui.Q("tr").add(dm_Ui.Q("td").text(I18n._("Level") + ": ")).add(mkTick(1)).add(mkLevelWg(1))).add(dm_Ui.Q("tr").add(dm_Ui.Q("td")).add(mkTick(2)).add(mkLevelWg(2)));
		let mkLed = function(i) {
			if(i == Model.group.value) {
				return Cts.mkLed(true);
			} else {
				return dm_Ui.link(function(e) {
					_gthis.setGroup(i);
				}).klass("link").add(Cts.mkLed(false));
			}
		};
		let leds = dm_Device.isMobilV ? [dm_Ui.Q("tr").adds(dm_It.range(5).map(function(i) {
			return dm_Ui.Q("td").add(mkLed(i));
		}).to()),dm_Ui.Q("tr").adds(dm_It.range(5,10).map(function(i) {
			return dm_Ui.Q("td").add(mkLed(i));
		}).to())] : [dm_Ui.Q("tr").adds(dm_It.range(10).map(function(i) {
			return dm_Ui.Q("td").add(mkLed(i));
		}).to())];
		let module = dm_Device.isMobilV ? 2 : 3;
		let trs = [];
		let picts = Loader.getPicts();
		let tr = dm_Ui.Q("tr");
		let _g = 0;
		let _g1 = picts.length;
		while(_g < _g1) {
			let i = _g++;
			tr.add(dm_Ui.Q("td").add(this.mkPictureWg(picts[i])));
			if(i % module == module - 1) {
				trs.push(tr);
				tr = dm_Ui.Q("tr");
			}
		}
		let rest = picts.length % module;
		if(rest > 0) {
			tr.add(dm_Ui.Q("td"));
			if(module == 3 && rest == 1) {
				tr.add(dm_Ui.Q("td"));
			}
			trs.push(tr);
		}
		this.wg.removeAll().add(dm_Ui.Q("table").klass("main").add(dm_Ui.Q("tr").add(dm_Ui.Q("td")).add(dm_Ui.Q("td").att("rowspan","2").style("vertical-align:middle;").add(sel)).add(dm_Ui.Q("td").style("text-align:right;width:5px;vertical-align:bottom;" + "white-space:nowrap;").add(dm_Ui.Q("span").add(dm_Ui.link($bind(this,this.delMarks)).add(Loader.mkIcon(Icon.TRASH)))).add(dm_Ui.Q("span").html("&nbsp;&nbsp;&nbsp;&nbsp;")).add(dm_Ui.Q("span").add(dm_Ui.link($bind(this,this.help)).add(Loader.mkIcon(Icon.HELP)))).add(dm_Ui.Q("span").html("&nbsp;&nbsp;&nbsp;&nbsp;")).add(dm_Ui.Q("span").add(dm_Ui.link($bind(this,this.open)).add(Loader.mkIcon(Icon.OPEN)))))).add(dm_Ui.Q("tr").add(dm_Ui.Q("td").style("width:5px;vertical-align:bottom;").add(Loader.mkIcon(Icon.DMPUZZLE))).add(dm_Ui.Q("td").style("text-align:right;width:5px;vertical-align:bottom;").add(dm_Ui.Q("table").adds(leds))))).add(dm_Ui.Q("hr")).add(dm_Ui.Q("table").att("align","center").adds(trs));
	}
	mkPictureWg(p) {
		let _gthis = this;
		let tick = Model.solved.contains(Model.level.value,p.name) ? "✓ " : "";
		return dm_Ui.Q("table").klass("frame").add(dm_Ui.Q("tr").add(dm_Ui.Q("td").att("colspan","3").add(dm_Ui.link(function(e) {
			_gthis.selPicture(p);
		}).add(p.getMedium().klass("frame0"))))).add(dm_Ui.Q("tr").add(dm_Ui.Q("td").style("text-align: left;width:40%;").text(tick + p.name)).add(dm_Ui.Q("td").style("text-align: right;width:40%;").add(dm_Ui.Q("a").att("href",p.link).att("title",p.author).text("web"))));
	}
}
view_Index.__name__ = true;
Object.assign(view_Index.prototype, {
	__class__: view_Index
});
class view_OpenBox {
	constructor() {
		this.marksChecked = false;
		this.marksCheckedWg = dm_Ui.Q("span");
		this.inp = dm_Ui.Q("input");
		this.inp.att("type","file").att("hidden","true").on(dm_ActionType.CHANGE,$bind(this,this.fileSelected));
		let content = this.mkContent();
		this.box = new dm_ModalBox(content,false);
	}
	check() {
		this.marksChecked = !this.marksChecked;
		this.marksCheckedWg.removeAll().add(dm_Ui.link($bind(this,this.check)).add(Cts.mkLed(this.marksChecked)));
	}
	fileSelected() {
		let files = (js_Boot.__cast(this.inp.e , HTMLInputElement)).files;
		let _gthis = this;
		if(files.length == 0) {
			this.box.show(false);
			return;
		}
		let file = files.item(0);
		let fr = new FileReader();
		fr.onload = function(e) {
			if(Model.restore(fr.result,_gthis.marksChecked)) {
				$global.location.reload();
			} else {
				dm_Ui.alert(I18n._args(I18n._("'%0' is not a valid backup"),[file.name]));
			}
		};
		fr.onerror = function(e) {
			fr.abort();
			dm_Ui.alert(I18n._("Fail reading file"));
		};
		fr.readAsText(files.item(0));
	}
	cancel() {
		this.box.show(false);
	}
	show() {
		View.modalBoxDiv.removeAll().add(this.box.wg);
		this.box.show(true);
	}
	mkContent() {
		let _gthis = this;
		return dm_Ui.Q("div").add(this.inp).add(dm_Ui.Q("div").html("&nbsp;")).add(dm_Ui.Q("div").html("<big>" + I18n._("Restore Jigsaw") + "</big>")).add(dm_Ui.Q("div").html("&nbsp;")).add(dm_Ui.Q("table").add(dm_Ui.Q("tr").add(dm_Ui.Q("td").style("vertical-align: top").add(this.marksCheckedWg.add(dm_Ui.link($bind(this,this.check)).add(Cts.mkLed(this.marksChecked))))).add(dm_Ui.Q("td").text(I18n._("Restore jicksaw marks"))))).add(dm_Ui.Q("div").html("&nbsp;")).add(dm_Ui.Q("table").att("align","center").add(dm_Ui.Q("tr").add(dm_Ui.Q("td").add(dm_Ui.Q("button").text(I18n._("Cancel")).on(dm_ActionType.CLICK,$bind(this,this.cancel))).add(dm_Ui.Q("span").html("&nbsp;&nbsp;&nbsp;")).add(dm_Ui.Q("button").text(I18n._("Look@")).on(dm_ActionType.CLICK,function(e) {
			_gthis.inp.e.click();
		})))));
	}
}
view_OpenBox.__name__ = true;
Object.assign(view_OpenBox.prototype, {
	__class__: view_OpenBox
});
class view_Puzzle {
	constructor(jigsaw) {
		this.groups = new haxe_ds_IntMap();
		this.pieces = [];
		this.wg = dm_Ui.Q("div");
		this.jigsaw = jigsaw;
		this.board = new dm_Board(Cts.boardDim.w,Cts.boardDim.h).setBackground("#a0b0c0");
		let pcs = jigsaw.pieces;
		let side = jigsaw.get_pieceSide();
		let ds = jigsaw.get_pieceDisplazament();
		let img = jigsaw.get_image();
		let p = new dm_Point(0,0);
		let _g = 0;
		let _g1 = jigsaw.dim.h;
		while(_g < _g1) {
			let r = _g++;
			let a = [];
			let _g1 = 0;
			let _g2 = jigsaw.dim.w;
			while(_g1 < _g2) {
				let c = _g1++;
				let pc = dm_Opt.eget(dm_It.from(jigsaw.pieces).find(function(e) {
					if(e.idRow == r) {
						return e.idCol == c;
					} else {
						return false;
					}
				}));
				let pcWg = img.cut(p.x,p.y,side,side);
				this.redrawPiece(pc,pcWg);
				a.push(pcWg);
				p = new dm_Point(p.x + ds,p.y);
			}
			this.pieces.push(a);
			p = new dm_Point(0,p.y + ds);
		}
		this.mkGroups();
	}
	redrawPiece(piece,pieceWg) {
		let ps = piece.partSide;
		let cs = ps * (Cts.partsN - 6);
		let cx = pieceWg.canvas.getContext("2d",null);
		let up = function(x,y) {
			cx.beginPath();
			cx.lineTo(x,y);
			x += ps * 2;
			cx.lineTo(x,y);
			y -= ps;
			cx.lineTo(x,y);
			x += cs;
			cx.lineTo(x,y);
			y += ps;
			cx.lineTo(x,y);
			x += ps * 2;
			cx.lineTo(x,y);
			cx.stroke();
		};
		let down = function(x,y) {
			cx.beginPath();
			cx.lineTo(x,y);
			x += ps * 2;
			cx.lineTo(x,y);
			y += ps;
			cx.lineTo(x,y);
			x += cs;
			cx.lineTo(x,y);
			y -= ps;
			cx.lineTo(x,y);
			x += ps * 2;
			cx.lineTo(x,y);
			cx.stroke();
		};
		let hline = function(x,y) {
			cx.beginPath();
			cx.lineTo(x,y);
			x = x + ps * 4 + cs;
			cx.lineTo(x,y);
			cx.stroke();
		};
		let left = function(x,y) {
			cx.beginPath();
			cx.lineTo(x,y);
			y += ps * 2;
			cx.lineTo(x,y);
			x -= ps;
			cx.lineTo(x,y);
			y += cs;
			cx.lineTo(x,y);
			x += ps;
			cx.lineTo(x,y);
			y += ps * 2;
			cx.lineTo(x,y);
			cx.stroke();
		};
		let right = function(x,y) {
			cx.beginPath();
			cx.lineTo(x,y);
			y += ps * 2;
			cx.lineTo(x,y);
			x += ps;
			cx.lineTo(x,y);
			y += cs;
			cx.lineTo(x,y);
			x -= ps;
			cx.lineTo(x,y);
			y += ps * 2;
			cx.lineTo(x,y);
			cx.stroke();
		};
		let vline = function(x,y) {
			cx.beginPath();
			cx.lineTo(x,y);
			y = y + ps * 4 + cs;
			cx.lineTo(x,y);
			cx.stroke();
		};
		let blanks = piece.blanks();
		let _g = 0;
		let _g1 = blanks.up;
		while(_g < _g1.length) {
			let r = _g1[_g];
			++_g;
			cx.clearRect(r.x,r.y,r.w,r.h);
		}
		let _g2 = 0;
		let _g3 = blanks.right;
		while(_g2 < _g3.length) {
			let r = _g3[_g2];
			++_g2;
			cx.clearRect(r.x,r.y,r.w,r.h);
		}
		let _g4 = 0;
		let _g5 = blanks.down;
		while(_g4 < _g5.length) {
			let r = _g5[_g4];
			++_g4;
			cx.clearRect(r.x,r.y,r.w,r.h);
		}
		let _g6 = 0;
		let _g7 = blanks.left;
		while(_g6 < _g7.length) {
			let r = _g7[_g6];
			++_g6;
			cx.clearRect(r.x,r.y,r.w,r.h);
		}
		cx.lineWidth = 1;
		cx.strokeStyle = "#000000";
		let x = ps;
		let y = ps;
		if(piece.up == 1) {
			up(x,y);
		} else if(piece.up == -1) {
			down(x,y);
		} else {
			hline(x,y);
		}
		x = ps;
		y = ps * 5 + cs;
		cx.strokeStyle = "#000000";
		if(piece.down == 1) {
			down(x,y);
		} else if(piece.down == -1) {
			up(x,y);
		} else {
			hline(x,y);
		}
		cx.strokeStyle = "#000000";
		let x1 = ps;
		let y1 = ps;
		if(piece.left == 1) {
			left(x1,y1);
		} else if(piece.left == -1) {
			right(x1,y1);
		} else {
			vline(x1,y1);
		}
		x1 = ps * 5 + cs;
		y1 = ps;
		cx.strokeStyle = "#000000";
		if(piece.right == 1) {
			right(x1,y1);
		} else if(piece.right == -1) {
			left(x1,y1);
		} else {
			vline(x1,y1);
		}
	}
	back() {
		Model.page.setValue(model_PageType.INDEX);
		View.update();
	}
	changeAudio() {
		Model.audio.setValue(!Model.audio.value);
		this.update();
	}
	start() {
		this.board.copyFrom(this.jigsaw.get_smallImage(),this.jigsaw.partSide,this.jigsaw.partSide);
		let grs = this.jigsaw.groups.slice();
		let ps = this.jigsaw.get_pieceSide();
		dm_Rnd.shuffle(grs);
		let ix = 0;
		let y = this.board.get_height() - this.pieces.length * ps;
		let x0 = this.board.get_width() - this.pieces[0].length * ps;
		let _g = 0;
		let _g1 = this.pieces.length;
		while(_g < _g1) {
			let r = _g++;
			let x = x0;
			let _g1 = 0;
			let _g2 = this.pieces[0].length;
			while(_g1 < _g2) {
				let c = _g1++;
				if(ix >= grs.length) {
					break;
				}
				let gr = grs[ix++];
				gr.setPos(new dm_Point(x,y));
				this.groups.h[gr.id].moveTo(x,y,350);
				x += ps;
			}
			y += ps;
		}
		this.jigsaw.start();
		Model.page.setValue(model_PageType.PICTURE(this.jigsaw));
	}
	show(parent) {
		parent.removeAll().add(this.wg);
		this.update();
	}
	update() {
		this.board.clear();
		let ctx = this.board.canvas.getContext("2d",null);
		let pattern = ctx.createPattern(js_Boot.__cast(Loader.back2.e , HTMLImageElement),"repeat");
		ctx.fillStyle = pattern;
		ctx.fillRect(0,0,this.board.get_width(),this.board.get_height());
		let actionDiv = dm_Ui.Q("div");
		actionDiv.add(dm_Ui.link($bind(this,this.changeAudio)).add(Loader.mkIcon(Model.audio.value ? Icon.AUDIO_ON : Icon.AUDIO_OFF))).add(dm_Ui.Q("span").html("&nbsp;&nbsp;&nbsp;&nbsp;")).add(this.mkSave());
		if(this.jigsaw.started) {
			this.board.copyFrom(this.jigsaw.get_smallImage(),this.jigsaw.partSide,this.jigsaw.partSide);
			let _g = 0;
			let _g1 = dm_It.from(this.jigsaw.groups).reverse().to();
			while(_g < _g1.length) {
				let jgr = _g1[_g];
				++_g;
				let p = jgr.pos;
				this.groups.h[jgr.id].put(p.x,p.y);
			}
		} else {
			let _g = 0;
			let _g1 = this.jigsaw.groups;
			while(_g < _g1.length) {
				let jgr = _g1[_g];
				++_g;
				let p = jgr.pos;
				this.groups.h[jgr.id].put(p.x,p.y);
			}
			haxe_Timer.delay($bind(this,this.start),1000);
		}
		this.wg.removeAll().add(dm_Ui.Q("table").klass("main").add(dm_Ui.Q("tr").add(dm_Ui.Q("td").style("text-align:left;width:5px;vertical-align:bottom").add(dm_Ui.link($bind(this,this.back)).att("title",I18n._("Back")).add(Loader.mkIcon(Icon.LEFT)))).add(dm_Ui.Q("td").add(dm_Ui.Q("div").klass("title").text(Cts.appName))).add(dm_Ui.Q("td").style("text-align:right;width:5px;vertical-align:bottom;" + "white-space:nowrap;").add(actionDiv)))).add(dm_Ui.Q("table").att("align","center").add(dm_Ui.Q("tr").add(dm_Ui.Q("td").klass("frame").add(dm_Ui.Q(null,this.board.wg).klass("frame0")))));
	}
	mkSave() {
		let link = dm_Ui.Q("a").att("download","DmPuzzle" + dm_Dt.to(new Date()) + ".json").att("hidden","true");
		return dm_Ui.Q("span").add(link).add(dm_Ui.link(function(ev) {
			link.att("href","data:application/octet-stream;base64," + Model.serialize());
			link.e.click();
		}).add(Loader.mkIcon(Icon.SAVE)).att("title",I18n._("Save")));
	}
	mkGroups() {
		let side = this.jigsaw.get_pieceSide();
		let ds = this.jigsaw.get_pieceDisplazament();
		let partSide = this.jigsaw.partSide;
		let _gthis = this;
		let partSide2 = partSide * 2;
		let inBlank = side - partSide2 * 2;
		this.groups.h = { };
		let _g = 0;
		let _g1 = this.jigsaw.groups;
		while(_g < _g1.length) {
			let g = _g1[_g];
			++_g;
			let pcs = g.pieces;
			let gWg = new dm_Board((g.dim.w - 1) * ds + side,(g.dim.h - 1) * ds + side);
			let sprite = new dm_Sprite(this.board,gWg.canvas,true).setZindex(g.zindex);
			sprite.addMouseDown(function(e) {
				_gthis.draggedGroup = g;
				let abs = dm_Pointer.absolute(e);
				if(sprite.inBlank(abs)) {
					_gthis.draggedGroup = null;
					let _g = 0;
					let _g1 = _gthis.jigsaw.groups;
					while(_g < _g1.length) {
						let jgr = _g1[_g];
						++_g;
						let spr = _gthis.groups.h[jgr.id];
						if(dm_Pointer.bounds(spr.canvas).contains(abs) && !spr.inBlank(abs)) {
							_gthis.draggedGroup = jgr;
							try {
								let tev = js_Boot.__cast(e , TouchEvent);
								spr.canvas.dispatchEvent(new TouchEvent("touchstart",dm_Pointer.copyTouchEvent(tev)));
							} catch( _g ) {
								spr.canvas.dispatchEvent(new MouseEvent("mousedown",dm_Pointer.copyEvent(e)));
							}
							break;
						}
					}
					if(_gthis.draggedGroup == null) {
						e.preventDefault();
						return;
					}
				}
				_gthis.draggedGroup.setZindex(1000);
				let jgrs = _gthis.jigsaw.normalizeZindex();
				let _g = 0;
				while(_g < jgrs.length) {
					let jgr = jgrs[_g];
					++_g;
					_gthis.groups.h[jgr.id].setZindex(jgr.zindex);
				}
			}).addDrop(function(e) {
				if(_gthis.draggedGroup == null) {
					return;
				}
				_gthis.draggedGroup.setPos(new dm_Point(Std.parseInt(sprite.canvas.style.left),Std.parseInt(sprite.canvas.style.top)));
				let rs = _gthis.jigsaw.connect(_gthis.draggedGroup);
				Model.page.setValue(model_PageType.PICTURE(_gthis.jigsaw));
				if(rs.connected) {
					let g = _gthis.groups.iterator();
					while(g.hasNext()) {
						let g1 = g.next();
						g1.quit();
					}
					_gthis.mkGroups();
					if(Model.audio.value) {
						Loader.audio.play();
					}
					_gthis.update();
					if(rs.finished) {
						Model.solved.add(Model.level.value,_gthis.jigsaw.picture);
						Model.page.setValue(model_PageType.INDEX);
						haxe_Timer.delay(function() {
							let this1 = _gthis.groups;
							let key = _gthis.groups.keys().next();
							let gr = this1.h[key];
							gr.moveTo((_gthis.board.get_width() / 2 | 0) - (gr.canvas.width / 2 | 0),(_gthis.board.get_height() / 2 | 0) - (gr.canvas.height / 2 | 0),600);
							haxe_Timer.delay(function() {
								_gthis.board.copyFrom(_gthis.jigsaw.get_image(),(_gthis.board.get_width() / 2 | 0) - (gr.canvas.width / 2 | 0),(_gthis.board.get_height() / 2 | 0) - (gr.canvas.height / 2 | 0));
								gr.quit();
								new view_CongratulationsBox(_gthis.jigsaw.picture,Cts.get_levels()[Model.level.value]).show();
							},800);
						},500);
					}
				} else {
					let g = _gthis.groups.iterator();
					while(g.hasNext()) {
						let g1 = g.next();
						g1.quit();
					}
					_gthis.mkGroups();
					_gthis.update();
				}
			});
			let p = new dm_Point(0,0);
			let _g2 = 0;
			let _g3 = g.dim.h;
			while(_g2 < _g3) {
				let r = _g2++;
				let _g = 0;
				let _g1 = g.dim.w;
				while(_g < _g1) {
					let c = _g++;
					let addBlanks = function(blanks) {
						let _g = 0;
						while(_g < blanks.length) {
							let b = blanks[_g];
							++_g;
							sprite.addBlank(new dm_Rectangle(b.x + c * ds,b.y + r * ds,b.w,b.h));
						}
					};
					let _g1 = pcs[r][c];
					switch(_g1._hx_index) {
					case 0:
						let pc = _g1.v;
						gWg.copyFrom(this.pieces[pc.idRow][pc.idCol],p.x,p.y);
						let blanks = pc.blanks();
						if(r == 0 || pcs[r - 1][c] == dm_Option.None) {
							addBlanks(blanks.up);
						}
						if(r == g.dim.h - 1 || pcs[r + 1][c] == dm_Option.None) {
							addBlanks(blanks.down);
						}
						if(c == 0 || pcs[r][c - 1] == dm_Option.None) {
							addBlanks(blanks.left);
						}
						if(c == g.dim.w - 1 || pcs[r][c + 1] == dm_Option.None) {
							addBlanks(blanks.right);
						}
						break;
					case 1:
						sprite.addBlank(new dm_Rectangle(p.x + partSide,p.y + partSide,ds,ds));
						if(r == 0) {
							addBlanks([new dm_Rectangle(0,0,side,partSide)]);
						}
						if(r == g.dim.h - 1) {
							addBlanks([new dm_Rectangle(0,side - partSide,side,partSide)]);
						}
						if(c == 0) {
							addBlanks([new dm_Rectangle(0,0,partSide,side)]);
						}
						if(c == g.dim.w - 1) {
							addBlanks([new dm_Rectangle(side - partSide,0,partSide,side)]);
						}
						break;
					}
					p = new dm_Point(p.x + ds,p.y);
				}
				p = new dm_Point(0,p.y + ds);
			}
			this.groups.h[g.id] = sprite;
		}
	}
}
view_Puzzle.__name__ = true;
Object.assign(view_Puzzle.prototype, {
	__class__: view_Puzzle
});
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
dm_Device.isMobil = dm_Device.isMobilf();
dm_Device.isMobilH = dm_Device.isMobilHf();
dm_Device.isMobilV = dm_Device.isMobil ? !dm_Device.isMobilH : false;
dm_Device.pixelRatio = window.devicePixelRatio;
dm_Device.isBig = dm_Device.pixelRatio > 1;
dm_Device.screen = dm_Device.screenf();
Cts.appName = "DmPuzzle";
Cts.appVersion = "202012";
Cts.storeKey = Cts.appName + "__data";
Cts.easyDim = new dm_Dimension(4,3);
Cts.mediumDim = new dm_Dimension(8,6);
Cts.expertDim = new dm_Dimension(12,9);
Cts.partsN = 7;
Cts.foot = dm_Ui.Q("table").klass("main").add(dm_Ui.Q("tr").add(dm_Ui.Q("td").add(dm_Ui.Q("hr")))).add(dm_Ui.Q("tr").add(dm_Ui.Q("td").style("text-align: right;color:#808080;font-size:x-small;").html("- © ºDeme. " + Cts.appName + " (" + Cts.appVersion + ") -")));
Cts.defaultPicture = Cts.mkDefaultPicture();
Cts.boardDim = dm_Device.isMobil ? dm_Device.isMobilH ? new dm_Dimension(dm_Device.screen.w * 0.7 | 0,dm_Device.screen.h * 0.45 | 0) : new dm_Dimension(dm_Device.screen.w * 0.9 | 0,dm_Device.screen.h * 0.70 | 0) : new dm_Dimension(dm_Device.screen.w * 0.80 | 0,dm_Device.screen.h * 0.6 | 0);
Cts.jigsawVal = dm_Device.isMobilH ? Cts.boardDim.h * 0.7 * 4 / 3 : dm_Device.isMobilV ? Cts.boardDim.w * 0.7 : Cts.boardDim.w / 2;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
I18n.enDic = (function($this) {
	var $r;
	let _g = new haxe_ds_StringMap();
	_g.h["'%0' is not a valid backup"] = "'%0' is not a valid backup";
	_g.h["Accept"] = "Accept";
	_g.h["Alarm Clock"] = "Alarm Clock";
	_g.h["Alien"] = "Alien";
	_g.h["Archs"] = "Archs";
	_g.h["Back"] = "Back";
	_g.h["Bats"] = "Bats";
	_g.h["Boat"] = "Boat";
	_g.h["Cancel"] = "Cancel";
	_g.h["Car"] = "Car";
	_g.h["Cards"] = "Cards";
	_g.h["Cat"] = "Cat";
	_g.h["Cauldron"] = "Cauldron";
	_g.h["Close"] = "Close";
	_g.h["Congratulations!!!"] = "Congratulations!!!";
	_g.h["Corridor"] = "Corridor";
	_g.h["Couple"] = "Couple";
	_g.h["Credits"] = "Credits";
	_g.h["Desert"] = "Desert";
	_g.h["Dices"] = "Dices";
	_g.h["Dragon"] = "Dragon";
	_g.h["Duplicate"] = "Duplicate";
	_g.h["Easy"] = "Easy";
	_g.h["Evolution"] = "Evolution";
	_g.h["Expert"] = "Expert";
	_g.h["Fail reading file"] = "Fail reading file";
	_g.h["Field"] = "Field";
	_g.h["Flowers"] = "Flowers";
	_g.h["Fractal"] = "Fractal";
	_g.h["Girl"] = "Girl";
	_g.h["Hexagonal"] = "Hexagonal";
	_g.h["Hourglass"] = "Hourglass";
	_g.h["Index"] = "Index";
	_g.h["Internet"] = "Internet";
	_g.h["Jigsaw<br>correctly finished"] = "Jigsaw<br>correctly finished";
	_g.h["Journey"] = "Journey";
	_g.h["Keys"] = "Keys";
	_g.h["Lake"] = "Lake";
	_g.h["Level"] = "Level";
	_g.h["Literature"] = "Literature";
	_g.h["Look"] = "Look";
	_g.h["Look@"] = "Look";
	_g.h["Lottery"] = "Lottery";
	_g.h["Market"] = "Market";
	_g.h["Medium"] = "Medium";
	_g.h["Monumental"] = "Monumental";
	_g.h["Mushrooms"] = "Mushrooms";
	_g.h["Office"] = "Office";
	_g.h["Owl"] = "Owl";
	_g.h["Pen"] = "Pen";
	_g.h["Play"] = "Play";
	_g.h["Pocket"] = "Pocket";
	_g.h["Railway"] = "Railway";
	_g.h["Ravens"] = "Ravens";
	_g.h["Reflections"] = "Reflections";
	_g.h["Remove 'done marks' from jigsaws?"] = "Remove 'done marks' from jigsaws?";
	_g.h["Restore Jigsaw"] = "Restore Jigsaw";
	_g.h["Restore jicksaw marks"] = "Restore jicksaw marks";
	_g.h["Ring"] = "Ring";
	_g.h["River"] = "River";
	_g.h["Robots"] = "Robots";
	_g.h["Rose"] = "Rose";
	_g.h["Roulette"] = "Roulette";
	_g.h["Save"] = "Save";
	_g.h["School"] = "School";
	_g.h["Security"] = "Security";
	_g.h["Slots"] = "Slots";
	_g.h["Spaceship"] = "Spaceship";
	_g.h["Spider"] = "Spider";
	_g.h["Streetlight"] = "Streetlights";
	_g.h["Surgery"] = "Surgery";
	_g.h["Tied"] = "Tied";
	_g.h["Typewriter"] = "Typewriter";
	_g.h["Watch"] = "Watch";
	_g.h["Wolf"] = "Wolf";
	_g.h["Zap"] = "Zap";
	$r = _g;
	return $r;
}(this));
I18n.esDic = (function($this) {
	var $r;
	let _g = new haxe_ds_StringMap();
	_g.h["'%0' is not a valid backup"] = "'%0' no es una copia válida";
	_g.h["Accept"] = "Aceptar";
	_g.h["Alarm Clock"] = "Despertador";
	_g.h["Alien"] = "Extraterrestre";
	_g.h["Archs"] = "Arcos";
	_g.h["Back"] = "Atrás";
	_g.h["Bats"] = "Murciélagos";
	_g.h["Boat"] = "Barca";
	_g.h["Cancel"] = "Cancelar";
	_g.h["Car"] = "Coche";
	_g.h["Cards"] = "Cartas";
	_g.h["Cat"] = "Gato";
	_g.h["Cauldron"] = "Caldero";
	_g.h["Close"] = "Cerrar";
	_g.h["Congratulations!!!"] = "¡¡¡Felicidades!!!";
	_g.h["Corridor"] = "Corredor";
	_g.h["Couple"] = "Pareja";
	_g.h["Credits"] = "Créditos";
	_g.h["Desert"] = "Desierto";
	_g.h["Dices"] = "Dados";
	_g.h["Dragon"] = "Dragón";
	_g.h["Duplicate"] = "Duplicados";
	_g.h["Easy"] = "Fácil";
	_g.h["Evolution"] = "Evolución";
	_g.h["Expert"] = "Experto";
	_g.h["Fail reading file"] = "Fallo leyendo el archivo";
	_g.h["Field"] = "Campo";
	_g.h["Flowers"] = "Flores";
	_g.h["Fractal"] = "Fractal";
	_g.h["Girl"] = "Jóven";
	_g.h["Hexagonal"] = "Hexagonal";
	_g.h["Hourglass"] = "De arena";
	_g.h["Index"] = "Índice";
	_g.h["Internet"] = "Internet";
	_g.h["Jigsaw<br>correctly finished"] = "Puzle<br>terminado correctamente";
	_g.h["Journey"] = "Viaje";
	_g.h["Keys"] = "Llaves";
	_g.h["Lake"] = "Lago";
	_g.h["Level"] = "Nivel";
	_g.h["Literature"] = "Literatura";
	_g.h["Look"] = "Mirada";
	_g.h["Look@"] = "Buscar";
	_g.h["Lottery"] = "Lotería";
	_g.h["Market"] = "Bolsa";
	_g.h["Medium"] = "Medio";
	_g.h["Monumental"] = "Monumental";
	_g.h["Mushrooms"] = "Hongos";
	_g.h["Office"] = "Oficina";
	_g.h["Owl"] = "Buho";
	_g.h["Pen"] = "Lápiz";
	_g.h["Play"] = "Juego";
	_g.h["Pocket"] = "De bolsillo";
	_g.h["Railway"] = "Ferrocarril";
	_g.h["Ravens"] = "Cuervos";
	_g.h["Reflections"] = "Reflejos";
	_g.h["Remove 'done marks' from jigsaws?"] = "¿Eliminar las marcas de \"hecho\"\nen los puzles?";
	_g.h["Restore Jigsaw"] = "Restaurar Puzle";
	_g.h["Restore jicksaw marks"] = "Restaurar las marcas de los puzles";
	_g.h["Ring"] = "Anillo";
	_g.h["River"] = "Rio";
	_g.h["Robots"] = "Robots";
	_g.h["Rose"] = "Rosa";
	_g.h["Roulette"] = "Ruleta";
	_g.h["Save"] = "Guardar";
	_g.h["School"] = "Escuela";
	_g.h["Security"] = "Seguridad";
	_g.h["Slots"] = "Tragaperras";
	_g.h["Spaceship"] = "Nave espacial";
	_g.h["Spider"] = "Araña";
	_g.h["Streetlight"] = "Farolas";
	_g.h["Surgery"] = "Cirujía";
	_g.h["Tied"] = "Atada";
	_g.h["Typewriter"] = "Mecanografía";
	_g.h["Watch"] = "De pulsera";
	_g.h["Wolf"] = "Lobo";
	_g.h["Zap"] = "Zap";
	$r = _g;
	return $r;
}(this));
I18n.lang = "es";
Loader.pictsGroup = 0;
Loader.picts = [new data_Picture(I18n._("Lake"),"lake","Susanne Jutzeler","https://pixabay.com/photos/tr%C3%BCebsee-titlis-switzerland-5337646/"),new data_Picture("Himalaya","himalaya","David Mark","https://pixabay.com/photos/ama-dablam-himalaya-mountain-peak-2064522/"),new data_Picture(I18n._("Boat"),"boat","Quang Le","https://pixabay.com/photos/sunrise-boat-rowing-boat-nobody-1014712/"),new data_Picture(I18n._("River"),"river","Ian Turnell","https://www.pexels.com/photo/" + "body-of-water-between-green-leaf-trees-709552/"),new data_Picture(I18n._("Field"),"field","Jorg Peter","https://pixabay.com/photos/landscape-autumn-twilight-mountains-615428/"),new data_Picture(I18n._("Desert"),"desert","Jorg Peter","https://pixabay.com/photos/desert-morocco-sand-dune-dry-1270345/"),new data_Picture(I18n._("Flowers"),"flowers","Cooper Hewitt","https://www.si.edu/object/drawing:chndm_1975-73-1-2?" + "page=1&edan_q=draws&edan_fq%5B0%5D=media_usage:" + "CC0&oa=1&destination=/search/collection-images&" + "searchResults=1&id=chndm_1975-73-1-2"),new data_Picture(I18n._("Railway"),"railway","DarkmoonArt_de","https://pixabay.com/photos/locomotive-clock-steampunk-industry-2821169/"),new data_Picture(I18n._("Journey"),"journey","Dariusz Sankowski","https://pixabay.com/photos/journey-adventure-photo-map-old-1130732/"),new data_Picture(I18n._("Typewriter"),"typewriter","Devanath","https://pixabay.com/photos/typewriter-vintage-old-1248088/"),new data_Picture(I18n._("Literature"),"literature","Ylanite Koppens","https://pixabay.com/photos/literature-library-knowledge-3091212/"),new data_Picture(I18n._("Ring"),"ring","Ylanite Koppens","https://pixabay.com/photos/paper-page-ring-romantic-love-3061485/"),new data_Picture(I18n._("Lottery"),"lottery","ºDeme","img/pictures/lotery.png"),new data_Picture(I18n._("Dices"),"dices","Erik Stein","https://pixabay.com/illustrations/cube-random-luck-eye-numbers-1655118/"),new data_Picture(I18n._("Cards"),"cards","PDPics","https://pixabay.com/photos/card-game-game-cards-black-white-167051/"),new data_Picture(I18n._("Roulette"),"roulette","Greg Montani","https://pixabay.com/photos/luck-lucky-number-13-roulette-839035/"),new data_Picture(I18n._("Slots"),"slots","Aidan Howe","https://pixabay.com/photos/slots-slot-slot-machine-5012428/"),new data_Picture(I18n._("Market"),"market","Gino Crescoli","https://pixabay.com/illustrations/dices-over-newspaper-profit-2656028/"),new data_Picture(I18n._("Girl"),"girl","The Retrox","https://hipwallpaper.com/view/oQ0YHj"),new data_Picture(I18n._("School"),"school","JakubAnitka","https://hipwallpaper.com/view/oQ0YHj"),new data_Picture(I18n._("Zap"),"zap","Andrew Martin","https://pixabay.com/illustrations/zap-comic-comic-book-fight-1601678/"),new data_Picture(I18n._("Internet"),"internet","OpenClipart-Vectors","https://pixabay.com/vectors/buying-cartoon-comic-2022595/"),new data_Picture(I18n._("Pen"),"pen","Willian Yuki Fujii Memmo","https://pixabay.com/illustrations/" + "turn-pen-manga-anime-digital-design-976930/"),new data_Picture(I18n._("Couple"),"couple","01lifeleft","https://pixabay.com/illustrations/" + "chibi-anime-cute-manga-character-2380489/"),new data_Picture(I18n._("Pocket"),"pocket","anncapictures","https://pixabay.com/photos/pocket-watch-time-of-sand-time-1637393/"),new data_Picture(I18n._("Hourglass"),"hourglass","anncapictures","https://pixabay.com/photos/hourglass-clock-time-period-hours-2910948/"),new data_Picture(I18n._("Alarm Clock"),"alarmClock","Free-Photos","https://pixabay.com/photos/desk-book-candle-clock-table-1148994/"),new data_Picture(I18n._("Office"),"office","Free-Photos","https://www.pexels.com/photo/blur-business-clock-composition-364671/"),new data_Picture(I18n._("Watch"),"watch","Free-Photos","https://pixabay.com/photos/watch-time-clock-hours-minutes-690288/"),new data_Picture(I18n._("Monumental"),"monumental","Tomasz Mikołajczyk","https://pixabay.com/photos/clock-monument-clock-shield-time-2050857/"),new data_Picture(I18n._("Corridor"),"corridor","Parker_West","https://pixabay.com/illustrations/" + "science-fiction-scifi-corridor-3334826/"),new data_Picture(I18n._("Surgery"),"surgery","alan9187","https://pixabay.com/photos/sci-fi-surgery-room-2992797/"),new data_Picture(I18n._("Alien"),"alien","alan9187","https://pixabay.com/photos/sci-fi-science-fiction-fantasy-5501588/"),new data_Picture(I18n._("Spaceship"),"spaceship","Thomas Budach","https://pixabay.com/photos/science-fiction-cover-forward-2793428/"),new data_Picture(I18n._("Fractal"),"fractal","Carroll MacDonald","https://pixabay.com/illustrations/mandelbulb-fractal-sci-fi-1352250/"),new data_Picture(I18n._("Evolution"),"evolution","Pete Linforth","https://pixabay.com/illustrations/alien-pods-space-3d-spacecraft-679474/"),new data_Picture("Triangular","triangular","midhunhk","https://hipwallpaper.com/view/oQ0YHj"),new data_Picture("Reggae","reggae","zOnk.oNe","https://hipwallpaper.com/view/cXwLaI"),new data_Picture("X","x","dedeme","https://www.deviantart.com/dedeme/art/minimalCross-0-701573926"),new data_Picture(I18n._("Look"),"look","dedeme","https://www.deviantart.com/dedeme/art/Motherboard-3-701574182"),new data_Picture(I18n._("Reflections"),"reflections","Enrique Meseguer","https://pixabay.com/illustrations/" + "fractal-light-fractal-flower-bud-1672982/"),new data_Picture(I18n._("Hexagonal"),"hexagonal","Magic Creative","https://pixabay.com/illustrations/hex-hexagonal-abstract-modern-675576/"),new data_Picture(I18n._("Spider"),"spider","Christine Trewer","https://pixabay.com/photos/spider-tarantula-arachnophobia-1772769/"),new data_Picture(I18n._("Bats"),"bats","jplenio","https://pixabay.com/photos/halloween-tree-silhouette-moon-fog-4582988/"),new data_Picture(I18n._("Ravens"),"ravens","Christine Sponchia","https://pixabay.com/photos/raven-bridge-horror-birds-animals-5426192/"),new data_Picture(I18n._("Owl"),"owl","cocoparisienne","https://pixabay.com/photos/thunderstorm-flash-weather-sky-2353703/"),new data_Picture(I18n._("Wolf"),"wolf","Pezibear","https://pixabay.com/illustrations/dog-wolf-yelp-moon-tree-night-647528/"),new data_Picture(I18n._("Cat"),"cat","cocoparisienne","https://pixabay.com/illustrations/" + "moon-moon-night-full-moon-romance-744184/"),new data_Picture(I18n._("Rose"),"rose","S. Hermann & F. Richter","https://pixabay.com/photos/heart-key-rose-herzchen-love-1809653/"),new data_Picture(I18n._("Keys"),"keys","Florian Berger","https://pixabay.com/photos/key-colorful-matching-number-74534/"),new data_Picture(I18n._("Tied"),"tied","ongerdesign","https://pixabay.com/photos/key-cord-symbol-symbolism-knot-2091883/"),new data_Picture(I18n._("Car"),"car","J W.","https://pixabay.com/photos/car-keys-interior-leather-pkw-2653311/"),new data_Picture(I18n._("Security"),"security","Hans Braxmeier","https://pixabay.com/photos/key-safe-key-door-key-open-make-up-182918/"),new data_Picture(I18n._("Duplicate"),"duplicate","Arek Socha","https://pixabay.com/illustrations/" + "keys-solution-business-success-2114363/"),new data_Picture(I18n._("Archs"),"archs","DarkmoonArt_de","https://pixabay.com/illustrations/" + "palace-starry-sky-clouds-candles-4320416/"),new data_Picture(I18n._("Dragon"),"dragon","pendleburyannette","https://pixabay.com/illustrations/" + "dragon-fantasy-animal-fairytale-4417431/"),new data_Picture(I18n._("Streetlight"),"streetlight","enriquelopezgarre","https://pixabay.com/illustrations/fantasy-night-sea-moon-sky-4235607/"),new data_Picture(I18n._("Mushrooms"),"mushrooms","Susann Mielke","https://pixabay.com/illustrations/" + "mushrooms-mushroom-landscape-stones-1722297/"),new data_Picture(I18n._("Robots"),"robots","Stefan Keller","https://pixabay.com/illustrations/" + "robot-planet-moon-space-forward-2256814/"),new data_Picture(I18n._("Cauldron"),"cauldron","loulou Nash","https://pixabay.com/illustrations/" + "witch-magic-halloween-witchcraft-2146712/")];
Loader.wins = [{ i : Icon.WIN0, lk : "https://commons.wikimedia.org/wiki/File:Happy_smiley_face.png"},{ i : Icon.WIN1, lk : "https://commons.wikimedia.org/wiki/File:" + "The_UserAlbum.com_social_network_logo.jpg"},{ i : Icon.WIN2, lk : "https://commons.wikimedia.org/wiki/File:Face-smile-2.png"},{ i : Icon.WIN3, lk : "https://commons.wikimedia.org/wiki/File:AMIGO.jpg"},{ i : Icon.WIN4, lk : "https://www.iconarchive.com/show/" + "crystal-clear-icons-by-everaldo/App-ksmiletris-smiley-icon.html"},{ i : Icon.WIN5, lk : "https://www.iconarchive.com/show/" + "oxygen-icons-by-oxygen-icons.org/Emotes-face-laugh-icon.html"},{ i : Icon.WIN6, lk : "https://www.iconarchive.com/show/" + "oxygen-icons-by-oxygen-icons.org/Emotes-face-angel-icon.html"}];
Loader.audio = dm_Audio.mk("sound/connect.mp3",3);
View.modalBoxDiv = dm_Ui.Q("div");
View.bodyWg = dm_Ui.Q("td");
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
model_Audio.storeKey = Cts.storeKey + "_audio";
model_Group.storeKey = Cts.storeKey + "_group";
model_Level.storeKey = Cts.storeKey + "_level";
model_OrientationChanged.storeKey = Cts.storeKey + "_orientationChanged";
model_Page.storeKey = Cts.storeKey + "_page";
model_Solved.storeKey = Cts.storeKey + "_solved";
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=index.js.map